var TaskAdd = function () {
    var e = $(this);
    $.ajaxSetup({async: !1}), String.prototype.startWith = function (e) {
        var t = new RegExp("^" + e);
        return t.test(this)
    }, String.prototype.endWith = function (e) {
        var t = new RegExp(e + "$");
        return t.test(this)
    };
    var t = function () {
        e.userList = new Array, $.post(e.contextPath + "/user/api/list-user", function (t, i) {
            _.each(t.userList, function (t) {
                return e.userId == t.id ? void e.userList.push({
                    id: t.id,
                    text: t.trueName + "-" + t.userName,
                    selected: !0
                }) : void e.userList.push({id: t.id, text: t.trueName + "-" + t.userName, selected: !1})
            }), $("#selUser").select2({
                language: {
                    noResults: function () {
                        return "无搜索结果"
                    }
                }, placeholder: "选择用户", data: e.userList
            }).on("change", function (e) {
            }), $("#selUser").val(e.userId).trigger('change')
        })
    }, i = function () {
        e.receiverList = new Array, $.post(e.contextPath + "/user/api/list-user", function (t, i) {
            _.each(t.userList, function (t) {
                return e.userId == t.id ? void e.receiverList.push({
                    id: t.id,
                    text: t.trueName,
                    selected: !0
                }) : void e.receiverList.push({id: t.id, text: t.trueName + "(" + t.userName + ")", selected: !1})
            }), $("#receiver").select2({data: e.receiverList,multiple:true,}), $("#receiver").val(e.userId).trigger('change');
        })
    }, r = function () {
        var t, i = $("#hidType").val();
        2 == i ? t = {serverType: 1, localType: 2} : 3 == i && (t = {
            serverType: 2,
            localType: 2
        }), e.serverList = new Array, $.post(e.contextPath + "/dev/task/api/list-hdp-clusters", t, function (t, i) {
            _.each(t.serverConfig, function (t) {
                e.serverList.push({id: t.id, text: t.clusterName, selected: !1})
            }), $("#server").select2({
                language: {
                    noResults: function () {
                        return "无搜索结果"
                    }
                }, placeholder: "选择服务器", data: e.serverList
            }).on("change", function (e) {
            }),
            $("#server").select2({data: e.serverList}), $("#server").val('2').trigger('change');
        })
    }, a = function () {
        var e = ace.edit("sqlEditor");
        e.getSession().setMode("ace/mode/sql"), $("#sqlEditor").data("editor", e);
        var t = ace.edit("sqlEditorView");
        t.setOptions({
            readOnly: !0,
            maxLines: 1 / 0
        }), t.getSession().setTabSize(2), t.getSession().setUseWrapMode(!0), t.session.setMode("ace/mode/sql"), $("#sqlEditorView").data("editor", t)
    }, s = function (t, i, r) {
        var a = {path: t, revision: i};
        $.getJSON(e.contextPath + "/dev/task/api/pull-scripts", a, function (e) {
            return "ok" != e.status ? void toastr.error(e.msg, "提示") : ($("#sqlEditorView").data("editor").setValue(e.scripts), $("#dlgSql .title").html(a.path + "@" + e.revision), $("#dlgSql").modal("show"), void("function" == typeof r && r(e.sql, e.revision)))
        }).always(function () {
        })
    }, n = function (t, i) {
        var r = 1 == t ? 0 : 1, a = $("#txtSvnPath").val(), s = $("#txtSvnRevision").val(),
            n = {path: a, revision: s, codeEditLock: r, id: $("#hidId").val()};
        $.getJSON(e.contextPath + "/dev/task/api/edit-sql", n, function (e) {
            return "ok" != e.status ? void toastr.error(e.msg, "获取最新代码") : (1 == t ? ($("#hidCodeEditLock").val(0), $("#sqlEditor").data("editor").setReadOnly(!0), $("#btnEditSql").html("编辑"), $("#btnEditSqlSave").hide()) : ($("#hidCodeEditLock").val(1), $("#sqlEditor").data("editor").setReadOnly(!1), $("#btnEditSql").html("退出编辑"), $("#btnEditSqlSave").show()), $("#sqlEditor").data("editor").setValue(e.sql), void("function" == typeof i && i(e.revision)))
        }).always(function () {
        })
    }, o = function () {
        var e = $("#taskConfig"), t = $(".alertInfo"), i = $(".alert-danger", t), r = $(".alert-success", t);
        e.validate({
            errorElement: "span",
            errorClass: "help-block help-block-error",
            focusInvalid: !1,
            ignore: "",
            rules: {
                jobName: {required: !0},
                description: {required: !0},
                server: {required: !0},
                hadoopQueue: {required: !0}
            },
            messages: {
                membership: {required: "Please select a Membership type"},
                service: {
                    required: "Please select  at least 2 types of Service",
                    minlength: jQuery.validator.format("Please select  at least {0} types of Service")
                }
            },
            errorPlacement: function (e, t) {
                t.parent(".input-group").size() > 0 ? e.insertAfter(t.parent(".input-group")) : t.attr("data-error-container") ? e.appendTo(t.attr("data-error-container")) : t.parents(".radio-list").size() > 0 ? e.appendTo(t.parents(".radio-list").attr("data-error-container")) : t.parents(".radio-inline").size() > 0 ? e.appendTo(t.parents(".radio-inline").attr("data-error-container")) : t.parents(".checkbox-list").size() > 0 ? e.appendTo(t.parents(".checkbox-list").attr("data-error-container")) : t.parents(".checkbox-inline").size() > 0 ? e.appendTo(t.parents(".checkbox-inline").attr("data-error-container")) : e.insertAfter(t)
            },
            invalidHandler: function (e, t) {
                r.hide(), i.show(), Metronic.scrollTo(i, -200)
            },
            highlight: function (e) {
                $(e).closest(".form-group").addClass("has-error")
            },
            unhighlight: function (e) {
                $(e).closest(".form-group").removeClass("has-error")
            },
            success: function (e) {
                e.closest(".form-group").removeClass("has-error")
            },
            submitHandler: function (e) {
                r.show(), i.hide(), e.submit()
            }
        })
    }, d = function () {
        if (e.editing = !!$("#hidId").val(), !e.editing) {
            var taskTitle = '';
            if($("#hidType").val() == 2){
              taskTitle = 'MYSQL';
            }
            if($("#hidType").val() == 3){
              taskTitle = 'HIVE-SQL';
            }
            if($("#hidType").val() == 16){
              taskTitle = 'SPARK-SQL';
            }
            return $("#taskTitle").html(taskTitle), void $("#sqlEditDiv").html('<a href="javascript:void(0);" id="btnEditSqlSave" class="btn btn-circle green"><i class="fa fa-save"></i>保存</a>')
        }
        $.ajax({
            type: "POST",
            url: e.contextPath + "/dev/task/api/fetch-task",
            data: {id: $("#hidId").val()},
            success: function (t) {
                "ok" == t.status ? (e.task = t.task, l()) : toastr.error("获取任失败.", "提示")
            },
            error: function () {
                toastr.error("获取任务失败.", "提示")
            }
        })
    }, l = function () {
        console.log(e.task);
        writeRelationDataBack(e.task);
        var t = $.parseJSON(e.task.details);
        $("#jobName").val(e.task.jobName), $("#description").val(e.task.description), $("#hidType").val(e.task.type);
        var i = e.task.type;
        r(), 
        $("#taskTitle").html(i == 2 ? 'MYSQL' : i == 3 ? 'HIVE-SQL' : i == 16 ? 'SPARK-SQL' : ''),
        e.task.editerId && e.userId != e.task.editerId && e.task.codeEditLock ? ($("#sqlEditDiv").html("<a href=\"javascript:bootbox.alert('该文件正在被编辑，如需改动请联系编辑人" + e.task.editerName + '.\');" class="btn btn-circle green"><i class="fa fa-save"></i>编辑</a>'), $("#sqlEditor").data("editor").setReadOnly(!0)) : ($("#sqlEditDiv").html('<a href="javascript:void(0);" id="btnEditSql" class="btn btn-circle green">' + (1 == e.task.codeEditLock ? "退出编辑" : "编辑") + "</a>"), 1 != e.task.codeEditLock && $("#sqlEditor").data("editor").setReadOnly(!0)), $("#hidCodeEditLock").val(e.task.codeEditLock), $("#txtSvnPath").val(t.path), $("#txtSvnRevision").val(t.revision), $("#sqlEditor").data("editor").setValue(t.sql), $("#server").val(t.serverId).trigger("change"), $("#selUser").val(e.task.userId).trigger('change'), $("#receiver").val(t.receiver).trigger('change');
        var a = t.scheduler;
        t.dependencies;
        e.taskScheduler.loadScheduler(a)
    }, c = function () {
        $("#viewTask").click(function () {
            e.editing ? (e.viewJobUrl = e.contextPath + "/scheduler/task/detail?schedulerId=" + $("#hidId").val(), window.location.href = e.viewJobUrl) : toastr.error("任务不存在.", "提示")
        }), $("#btnEditSqlSave").click(function () {
            $("#saveTask").click()
        }), $("#btnEditSql").click(function () {
            var e = $("#hidCodeEditLock").val();
            1 == e ? bootbox.confirm("确定退出！退出编辑将不会保存代码,如需保存请点击上面Save按钮？", function (t) {
                t && n(e, function (e) {
                    $("#txtSvnRevision").val(e)
                })
            }) : n(e, function (e) {
                $("#txtSvnRevision").val(e)
            })
        }), $("#saveTask").click(function () {
            var t = function (e) {
                return toastr.error(e, "提示"), !1
            }, i = function (e) {
                return $.trim($(e).val())
            }, r = i("#jobName");
            if (r.indexOf(".") > 0) return t("任务名字不能包含'.'"), !1;
            var a = {
                "jobName": r,
                "type": $("#hidType").val(),
                "userId": i("#selUser"),
                "description": $("#description").val(),
                'outputMode': $('#taskConfig input[name="outputMode"]:checked').val(),
                'outputModeValue': $('#taskConfig input[name="outputMode"]:checked').val() == 1 ? JSON.stringify($('#taskConfig select[name="outputModeValue"]').val()) : $('#taskConfig input[name="outputModeValue"]').val(),
            };
            if (!$("#taskConfig").validate().form()) return !1;
            if (!$("#scheduleConfig").validate().form()) return !1;
            var s = {};
            $.extend(s, {
                path: i("#txtSvnPath"),
                revision: i("#txtSvnRevision"),
                serverId: i("#server"),
                sql: $("#sqlEditor").data("editor").getValue(),
                out: packRelationData(),
            }), 4 == $("#hidType").val() && $.extend(s, {
                dataSrc: $("#cg_datasys").combobox("getText"),
                dataSrcId: $("#cg_datasys").combobox("getValue"),
            });
            var n = e.taskScheduler.validateScheduler(), o = $("#dependencyJobIds").val();
            $.extend(s, {
                scheduler: n,
                dependencies: o
            }), a["details"] = JSON.stringify(s), e.editing && (a["id"] = $("#hidId").val()), console.log(a), $.post(e.contextPath + "/dev/task/api/save-script", a, function (t) {
                return "ok" != t.status ? void toastr.error(t.msg, "提示") : (toastr.success(e.editing ? "修改成功" : "保存成功", "提示"), e.editing || ($("#hidId").val(t.id), e.editing = !0), $("#txtSvnRevision").val(t.revision), $("#hidCodeEditLock").val(0), $("#sqlEditor").data("editor").setReadOnly(!0), $("#btnEditSql").html("编辑"), void v())
            }, "json")
        })
    }, u = function () {
        var t = $("#tblHistory");
        e.tblHistory = t.DataTable({
            bProcessing: !0,
            language: {
                emptyTable: "无结果",
                lengthMenu: "每页&nbsp; _MENU_ &nbsp;项",
                search: "查找：",
                processing: "正在加载...",
                info: "显示 _START_ 到 _END_ 共 _TOTAL_ 条记录",
                infoEmpty: "显示  0  到  0 共  0 条记录"
            },
            info: !1,
            ordering: !1,
            paging: !1,
            searching: !1,
            serverSide: !1,
            ajax: {
                url: e.contextPath + "/dev/task/api/fetch-history", type: "POST", data: function (e) {
                    e.columns = null, e.search = null, e.id = $("#hidId").val()
                }, dataSrc: function (e) {
                    return e.list || (e.list = []), e.list
                }
            },
            columns: [{data: "updateTime"}, {data: "operatorName"}, {data: "filepath"}, {
                data: null, render: function (e, t, i, r) {
                    return e.revision.substring(0, 7)
                }
            }, {
                data: null, render: function (e, t, i, r) {
                    return "<a href=\"javascript:TaskAdd.fetchSql('" + e.filepath + "','" + e.revision + '\')" preview="1">预览</a>'
                }
            }]
        }), $("#tblHistory_processing").hide();
        jQuery("#tblHistory_wrapper")
    }, v = function () {
        e.tblHistory.ajax.reload()
    };
    return {
        init: function (s) {
            e.contextPath = s.contextPath, e.userId = s.userId, e.taskScheduler = s.taskScheduler, t(), i(), a(), r(), o(), d(), u(), c()
        }, fetchSql: function (e, t, i) {
            s(e, t, i)
        }
    }
}();
//# sourceMappingURL=task-add-sql-d014ebf769.min.js.map
