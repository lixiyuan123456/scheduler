var TaskAdd = function() {
  var self = $(this);
  self.taskParams = {
    SOURCE_ETL_SLAVE : 1,
    SOURCE_DW_MASTER : 2,
    SOURCE_DW_IB : 3,
    SOURCE_HIVE : 4,
    SOURCE_HBASE : 5,
    SOURCE_HDFS : 6,

    EXTRACT_STANDARD : 1,
    EXTRACT_CUSTOM : 2,

    //TARGET_DW_STATS : 1,
    //TARGET_DW_MASTER : 2,
    //TARGET_DW_IB : 3,
    TARGET_HIVE : 2,
    //TARGET_HBASE : 5,
    //TARGET_HDFS : 6,

    LOAD_STANDARD : 1,
    LOAD_CUSTOM : 2,

    availableDirection : {
      1 : [2, 3, 4, 5, 6],
      2 : [1, 3, 4, 5, 6],
      3 : [1, 2, 4, 5, 6],
      4 : [1, 2, 3, 5, 6],
      5 : [1, 2, 3, 4, 6],
      6 : [1, 2, 3, 4, 5]
    }
  };
  $.ajaxSetup({
    async : false
  });
  String.prototype.startWith = function(str) {
    var reg = new RegExp("^" + str);
    return reg.test(this);
  }

  String.prototype.endWith = function(str) {
    var reg = new RegExp(str + "$");
    return reg.test(this);
  }

  var isNullOrEmpty = function(strVal) {
    if (strVal == '' || strVal == null || strVal == undefined) {
      return true;
    } else {
      return false;
    }
  }

  var initStatus = function() {
    $('#schedulerStatus').bootstrapToggle('off');
    $('#schedulerStatus').change(function() {
      $(this).attr('value', $(this).prop('checked') ? 1 : 2);
    })
  };

  var showError = function(msg) {
    showLoading(false);
    toastr["error"](msg, "提示");
    return false;
  };

  /**
   * 设置 switchbutton 的值，且根据 value 更改 check 状态
   */
  var setSwitchbuttonValue = function(id, v) {
    v = parseInt(v);
    switch (v) {
      case 1 :
        $(id).bootstrapToggle('on');
        $(id).attr('value', 1);
        break;
      case 2 :
        $(id).bootstrapToggle('off');
        $(id).attr('value', 2);
        break;
    }
  }

  /**
   * 根据 value 选中/取消 checkbox
   * 
   * @param id
   *            checkBox id
   * @param v
   *            checkBox value
   */
  var setCheckBox = function(id, v) {
    var box = $(id);
    parseInt(v) == 0 ? $.uniform.update(box.removeAttr('checked')) : $.uniform.update(box.attr('checked', true));
    $(id).val(v);
  }

  var initUserList = function() {
    self.userList = new Array();
    $.post(self.contextPath + '/user/api/list-user', function(data, status) {
      _.each(data.userList, function(user) {
        if (self.userId == user.id) {
          self.userList.push({
            id : user.id,
            text : user.trueName + "-" + user.userName,
            selected : true
          });
          return;
        } else {
          self.userList.push({
            id : user.id,
            text : user.trueName + "-" + user.userName,
            selected : false
          });
        }
      });
      $('#selUser').select2({
        data : self.userList
      });

      $('#selUser').val(self.userId).trigger('change');
    });
  };

  var initReceiverList = function() {
    self.receiverList = new Array();
    $.post(self.contextPath + '/user/api/list-user', function(data, status) {
      _.each(data.userList, function(user) {
        if (self.userId == user.id) {
          self.receiverList.push({
            id : user.id,
            text : user.trueName + "(" + user.userName + ")",
            selected : true
          });
          return;
        } else {
          self.receiverList.push({
            id : user.id,
            text : user.trueName + "(" + user.userName + ")",
            selected : false
          });
        }
      });

      $('#receiver').select2({
        data : self.receiverList,
        multiple : true,
      });

      $('#receiver').val(self.userId).trigger('change');

    });
  };

  var handleSpinners = function() {
    $('#spinnerMapNum').spinner({
      value : 0,
      min : 0,
      max : 200
    });
  };

  var initServerList = function() {
    // server_type-存储类型(2-hive)，local_type-应用类型(2-数据仓库)
    var type = $('#hidType').val();
    var params;
    if (type == 2) {
      // mysql脚本
      params = {
        serverType : 1,
        localType : 2
      };
    } else if (type == 3) {
      // hadoop脚本
      params = {
        serverType : 2,
        localType : 2
      };
    } else if (type == 1) {
      // 抽取脚本
      params = {
        serverType : 2,
        localType : 2
      };
    }

    self.serverList = new Array();
    $.post(self.contextPath + '/dev/task/api/list-hdp-clusters', params, function(data, status) {
      _.each(data.serverConfig, function(server) {
        self.serverList.push({
          id : server.id,
          text : server.clusterName,
          selected : false
        });
      });
      $('#server').select2({
        "language" : {
          "noResults" : function() {
            return "无搜索结果";
          }
        },
        placeholder : '选择服务器',
        data : self.serverList
      }).on('change', function(item) {
        /*
         * self.searchForm.userId = $(this).val(); self.oTable.ajax.reload();
         */
      });
      $("#server").select2({
        data : self.serverList
      }), $("#server").val('2').trigger('change');
    });
  };

  var initSourceServerType = function() {
    /*
     * var serverType = new Array(); $.post(self.contextPath +
     * '/dev/task/api/fetch-server-type', { type : 1 }, function(data, status) {
     * _.each(data.serverType, function(typeName, typeId) { serverType.push({ id :
     * typeId, text : typeName, selected : true }); }); });
     */
    $('#sourceServerType').select2(/*
     * { minimumResultsForSearch : -1,
     * "language" : { "noResults" : function() {
     * return "无搜索结果"; } }, placeholder :
     * '选择数据源类型', data : serverType }
     */).on('change', function(item) {
      $.ajaxSettings.async = false;
      loadServerData('source');
    });
  };

  var initTargetServerType = function() {
    /*
     * var serverType = new Array(); $.post(self.contextPath +
     * '/dev/task/api/fetch-server-type', { type : 2 }, function(data, status) {
     * _.each(data.serverType, function(typeName, typeId) { serverType.push({ id :
     * typeId, text : typeName, selected : true }); }); });
     */
    $('#targetServerType').select2(/*
     * { minimumResultsForSearch : -1,
     * "language" : { "noResults" : function() {
     * return "无搜索结果"; } }, placeholder :
     * '选择目的地类型', data : serverType }
     */).on('change', function(item) {
      $.ajaxSettings.async = false;
      loadServerData('target');
    });
  };

  var initServer = function(tagType) {
    var servers = new Array();
    $('#' + tagType + 'Config').select2({
      minimumResultsForSearch : -1,
      "language" : {
        "noResults" : function() {
          return "无搜索结果";
        }
      },
      placeholder : '选择服务器',
      data : servers
    }).on('change', function(item) {
      console.log(tagType + ':begin initialize databases');
      loadServerDbs(tagType);
      console.log(tagType + ':end initialize databases');
    });
  }

  var initServerDbs = function(tagType) {
    var dbs = new Array();
    $('#' + tagType + 'Database').select2({
      minimumResultsForSearch : -1,
      "language" : {
        "noResults" : function() {
          return "无搜索结果";
        }
      },
      placeholder : '选择数据库',
      data : dbs
    }).on('change', function(item) {
      console.log(tagType + ':begin initialize tables');
      loadDbTables(tagType);
      console.log(tagType + ':end initialize tables');
    });
  }

  var initDbTables = function(tagType) {
    var tables = new Array();
    $('#' + tagType + 'Table').select2({
      minimumResultsForSearch : -1,
      "language" : {
        "noResults" : function() {
          return "无搜索结果";
        }
      },
      formatNoMatches : function(term) {
        return "无匹配表<a href=\"#\" onclick=\"TaskAdd.loadTableMetaData('" + tagType + "," + term + "');\"" + " >导入表元数据</a>";
      },
      formatResult : formatState,
      placeholder : '选择表',
      data : tables
    }).on('change', function(item) {
      console.log(tagType + ':begin initialize fields');
      loadTableFields(tagType);
      console.log(tagType + ':end initialize fields');
    });
  }

  var getDealDate = function() {
    var date = new Date();
    date.setDate(date.getDate() - 1);
    return date.getFullYear() + '-' + (date.getMonth() < 9 ? ('0' + (date.getMonth() + 1)) : (date.getMonth() + 1)) + '-' + (date.getDate() < 10 ? ('0' + date.getDate()) : date.getDate());
  }

  var getMonthId = function(withM) {
    return getDealDate().substring(0, 7).replace('-', withM ? 'M' : '');
  }

  var initTableField = function() {
    $('#btnFetchSourceFields').click(function() {
      // loadTableFields('source');
      $.get(self.contextPath + '/dev/task/api/clear-memory-cache-for-data-extract', function(resp) {
        if (resp.status == 'ok') {
          toastr.info('清除缓存成功！');
        }
      });
    });
    $('#btnFetchTargetFields').click(function() {
      // loadTableFields('target');
      $.get(self.contextPath + '/dev/task/api/clear-memory-cache-for-data-extract', function(resp) {
        if (resp.status == 'ok') {
          toastr.info('清除缓存成功！');
        }
      });
    });
  }

  var loadServerDbs = function(tagType) {
    var type = $('#' + tagType + 'ServerType').val();
    var serverType;
    if (type == 1) {
      serverType = 1;
    } else if (type == 2) {
      serverType = 2;
    }
    var serverId = $('#' + tagType + 'Config').val();
    var data = {
      serverType : serverType,
      serverId : serverId
    };
    $.ajaxSettings.async = false;
    $.getJSON(self.contextPath + '/dev/task/api/fetch-source-db', data, function(result) {
      if (result.status != 'ok') {
        showError(result.msg);
        $('#' + tagType + 'Database').select2({
          "language" : {
            "noResults" : function() {
              return "无搜索结果";
            }
          },
          placeholder : '选择数据库',
          data : new Array()
        });
        return;
      }
      var dbList = new Array();
      _.each(result.serverDb, function(db) {
        dbList.push({
          id : db.id,
          text : db.db_name,
          selected : false
        });
      });
      $('#' + tagType + 'Database').select2({
        data : dbList
      })
    });
  };

  var formatState = function(state) {
    if (!state.id) {
      return state.text;
    }
    var $state = $('<span title="' + state.text + '">' + state.text + '</span>');
    return $state;
  }

  var loadDbTables = function(tagType) {
    var type = $('#' + tagType + 'ServerType').val();
    var serverType;
    if (type == 1) {
      serverType = 1;
    } else if (type == 2) {
      serverType = 2;
    }
    var data = {
      serverType : serverType,
      serverId : $('#' + tagType + 'Config').val(),
      dbId : $('#' + tagType + 'Database').val(),
      dbName : $('#' + tagType + 'Database').select2('data').text,
      table : ''
    };
    $.ajaxSettings.async = false;
    $.getJSON(self.contextPath + '/dev/task/api/fetch-tables', data, function(result) {
      if (result.status != 'ok') {
        showError(result.msg);
        $('#' + tagType + 'Table').select2({
          "language" : {
            "noResults" : function() {
              return "无搜索结果";
            }
          },
          data : new Array(),
          formatNoMatches : function(term) {
            return "无匹配表<a href=\"#\" onclick=\"TaskAdd.loadTableMetaData('" + tagType + "," + term + "');\"" + " >导入表元数据</a>";
          },
          placeholder : '选择表'
        });
        return;
      }
      var tableList = new Array();
      _.each(result.tables, function(table) {
        tableList.push({
          id : table.id,
          text : table.name,
          selected : false
        });
      });
      $('#' + tagType + 'Table').select2({
        data : tableList,
        formatNoMatches : function(term) {
          return "无匹配表<a href=\"#\" onclick=\"TaskAdd.loadTableMetaData('" + tagType + "," + term + "');\"" + " >导入表元数据</a>";
        },
        formatResult : formatState
      })
    });
  };

  var loadTableMetaData = function(tableName) {
    ss = tableName.split(",");
    var tagType = ss[0];
    var tableName = ss[1];
    $('#' + tagType + 'Table').select2("close");
    bootbox.prompt({
      title : "导入表元数据",
      inputType : 'text',
      value : tableName,
      callback : function(result) {
        if (result != null) {
          loadTable(tagType, result);
        }

      }
    });
  }

  var loadServerData = function(tagType) {
    $.ajaxSettings.async = false;
    // tagType: source,target
    var type = $('#' + tagType + 'ServerType').val();
    var data;
    if (type == 1) {
      // mysql 数据源
      data = {
        serverType : 1,
        localType : 1
      };
    } /*
     * else if (type == 2) { // mysql 数据仓库 data = { serverType : 2, localType :
     * 2 }; $('#' + tagType + 'PartitionDiv').addClass('hidden'); $('#' +
     * tagType + 'WhereDiv').removeClass('hidden'); $('#' + tagType +
     * 'PostSqlDiv').removeClass('hidden'); }
     */else if (type == 2) {
      // hive 数据源
      data = {
        serverType : 2,
        localType : 1
      }
    } else if (type == 4) {
      // hive 数据仓库
      data = {
        serverType : 2,
        localType : 2
      };
      $('#' + tagType + 'PartitionDiv').removeClass('hidden');
      $('#' + tagType + 'WhereDiv').addClass('hidden');
      $('#' + tagType + 'PostSqlDiv').addClass('hidden');
    }
    $.ajaxSettings.async = false;
    $.getJSON(self.contextPath + '/dev/task/api/fetch-server-configs', data, function(result) {
      $.ajaxSettings.async = false;
      if (result.status != 'ok') {
        showError('获取失败 - ' + result.msg);
        $('#' + tagType + 'Config').select2({
          "language" : {
            "noResults" : function() {
              return "无搜索结果";
            }
          },
          data : new Array(),
          formatNoMatches : function(term) {
            return "无匹服务器<a href=\"#\" onclick=\"window.open('" + self.contextPath + "/settings/server-list')\"" + ">添加服务器配置</a>";
          },
          placeholder : '选择服务器'
        });
        return;
      }
      var serverList = new Array();
      _.each(result.serverConfig, function(server) {
        serverList.push({
          id : server.id,
          text : server.filename,
          selected : false
        });
      });
      $('#' + tagType + 'Config').select2({
        data : serverList,
        "language" : {
          "noResults" : function() {
            return "无搜索结果";
          }
        },
        formatNoMatches : function(term) {
          return "无匹服务器<a href=\"#\" onclick=\"window.open('" + self.contextPath + "/settings/server-list')\"" + ">添加服务器配置</a>";
        }
      })
    });
  }

  var loadTableFields = function(tagType) {
    if (!($('#' + tagType + 'Table').select2('data')))
      return;
    var tableName = $('#' + tagType + 'Table option:selected').text();
    var tableId = $('#' + tagType + 'Table').val();
    $('#s2id_' + tagType + 'Table').prop("title", tableName);
    var originTableId;
    var tableFields;
    if (self.task) {
      var taskDetails = $.parseJSON(self.task.details);

      if (tagType == 'source') {
        // source
        tableFields = taskDetails.source.fields;
        orginTableId = taskDetails.source.tableId;
      } else if (tagType == 'target') {
        // target
        tableFields = taskDetails.target.fields;
        originTableId = taskDetails.target.tableId;
      }
    }

    if (typeof (tableFields) == "undefined") {
      tableFields = new Array();
    }
    // 如果tableId是非数字，给个默认数字
    if (isNaN(tableId)) {
      tableId = -1;
    }
    var suffixPtn = /\${[a-zA-Z]+}$/i;
    var cursuffix = "";
    var _suffix = tableName.match(suffixPtn);
    if (_suffix && _suffix.length > 0) {
      cursuffix = _suffix[0];
    }

    if (tableName.endsWith("YYYYMMDD")) {
      cursuffix = "YYYYMMDD";
    } else if (tableName.endsWith("YYYYMM")) {
      cursuffix = "YYYYMM";
    }

    var type = $('#' + tagType + 'ServerType').val();
    var serverType;
    if (type == 1) {
      serverType = 1;
    } else if (type == 2) {
      serverType = 2;
    }

    var data = {
      type : type,
      serverType : serverType,
      id : $('#' + tagType + 'Config').val(),
      dbId : $('#' + tagType + 'Database').val(),
      database : $('#' + tagType + 'Database option:selected').text(),
      tableId : tableId,
      table : tableName,
      tableSuffix : cursuffix
    };

    if (!data.database || !data.table) {
      showError('请输入数据库和表名');
      return false;
    }

    data.table = data.table.replace('${dateSuffix}', getDealDate().replace(/-/g, '')).replace('${monthSuffix}', getMonthId(false));

    data.table = data.table.replace('YYYYMMDD', getDealDate().replace(/-/g, '')).replace('YYYYMM', getMonthId(false));

    $.ajax({
      url : self.contextPath + '/dev/task/api/fetch-source-fields',
      dataType : "json",
      type : "post",
      data : data,
      beforeSend : function() {
        // showLoading(true);
      },
      success : function(result) {
        if (result.status != 'ok') {
          showError('获取失败 - ' + result.msg);
          return;
        }
        // $('#'+tagType+'Table').append("<option value='" + result.tableId +
        // "'>" + tableName + "</option>");
        /*
         * //老新字段数组进行合并去重 if(originTableId && tableId !=originTableId){
         * tableFields = result.fields; }
         */
        // var newFields = mergeTableFields(tableFields.concat(result.fields));
        var newFields = updateTableFields(tableFields, result.fields, tagType);
        if (tagType == 'target' && data.type == '4') {
          // 如果渲染的字段是目的地而且是hive表，直接读取后台元数据字段顺序就行
          newFields = result.fields;
        }

        renderTableFields(newFields, tagType);
      },
      complete : function() {
        // showLoading(false);
      }
    });
  }

  var loadTable = function(tagType, tableName) {
    // 如果tableId是非数字，给个默认数字
    tableId = -1;
    var suffixPtn = /\${[a-zA-Z]+}$/i;
    var cursuffix = "";
    var _suffix = tableName.match(suffixPtn);
    if (_suffix && _suffix.length > 0) {
      cursuffix = _suffix[0];
    }
    var data = {
      type : $('#' + tagType + 'ServerType').val(),
      id : $('#' + tagType + 'Config').val(),
      dbId : $('#' + tagType + 'Database').val(),
      database : $('#' + tagType + 'Database').select2('data')[0].text,
      tableId : tableId,
      table : tableName,
      tableSuffix : cursuffix
    };

    if (isNullOrEmpty(data.database) || isNullOrEmpty(data.table)) {
      showError('请输入数据库和表名。');
      return false;
    }

    data.table = data.table.replace('${dateSuffix}', getDealDate().replace(/-/g, '')).replace('${monthSuffix}', getMonthId(false));

    $.ajax({
      url : self.contextPath + '/dev/task/api/fetch-source-fields',
      dataType : "json",
      type : "post",
      data : data,
      beforeSend : function() {
        // showLoading(true);
      },
      success : function(result) {
        if (result.status != 'ok') {
          showError('获取失败 - ' + result.msg);
          return;
        }
        $('#' + tagType + 'Table').append("<option value='" + result.tableId + "'>" + tableName + "</option>");
        loadDbTables(tagType);
        $('#' + tagType + 'Table').val(result.tableId).trigger('change');
        /*
         * var data = { id: result.tableId, text: tableName };
         * $('#'+tagType+'Table').select2({'data':data, formatResult:
         * formatState } );
         */
        renderTableFields(result.fields, tagType);
      },
      complete : function() {
        // showLoading(false);
      }
    });
  }

  var renderTableFields = function(fields, tagType) {
    var targetType = parseInt($('#targetServerType').val())
    $('#' + tagType + 'Fields tr:gt(0)').remove();

    $.each(fields, function() {
      var tr = '<tr>' + '<td>' + this.name + '</td>' + '<td>' + this.type + '</td>';

      if (tagType == 'target' && targetType == self.taskParams.TARGET_HIVE) {
        tr += '<td><input type="checkbox" checked="checked" disabled></td>';
      } else if (tagType == 'source') {
        tr += '<td><input type="checkbox"' + (this.extract ? ' checked="checked"' : '') + '></td>';
      } else if (tagType == 'target') {
        tr += '<td><input type="checkbox"' + (this.load ? ' checked="checked"' : '') + '></td>';
      }

      if (tagType == 'source') {
        tr += '<td><input type="checkbox"' + (this.encryption ? ' checked="checked"' : '') + '></td>';
      } else {
      }

      if (tagType == 'target' && targetType == self.taskParams.TARGET_HIVE) {
        tr += '<td>--</td>';
      } else {
        tr += '<td>' + '  <a href="javascript:void(0);">向上</a>' + '  <a href="javascript:void(0);">向下</a>' + '  <a href="javascript:void(0);">最前</a>' + '  <a href="javascript:void(0);">最后</a>' + '</td>';
      }

      tr += '</tr>';

      tr = $(tr).appendTo('#' + tagType + 'Fields');
      bindMoveField(tr);
    });
  }

  var bindMoveField = function(tr) {
    var self = this;

    var tbl = tr.parents("table").eq(0);

    tr.find('td:last a:eq(0)').click(function() {
      var index = tbl.find('tr').index(tr);
      if (index > 1) {
        tr.insertBefore(tbl.find('tr').eq(index - 1));
      }
    });

    tr.find('td:last a:eq(1)').click(function() {
      var total = tbl.find('tr').length, index = tbl.find('tr').index(tr);
      if (index < total - 1) {
        tr.insertAfter(tbl.find('tr').eq(index + 1));
      }
    });

    tr.find('td:last a:eq(2)').click(function() {
      tr.insertAfter(tbl.find('tr').first());
    });

    tr.find('td:last a:eq(3)').click(function() {
      tr.insertAfter(tbl.find('tr').last());
    });
  }

  // task config validation
  var handleValidationTaskConfig = function() {
    // for more info visit the official plugin documentation:
    // http://docs.jquery.com/Plugins/Validation

    var taskConfigForm = $('#taskConfig');
    var alertInfo = $('.alertInfo');
    var error = $('.alert-danger', alertInfo);
    var success = $('.alert-success', alertInfo);

    taskConfigForm.validate({
      errorElement : 'span', // default input error message container
      errorClass : 'help-block help-block-error', // default input error message
      // class
      focusInvalid : false, // do not focus the last invalid input
      ignore : "", // validate all fields including form hidden input
      rules : {
        jobName : {
          required : true
        },
        description : {
          required : true
        },
        server : {
          required : true
        },
        sourceServerType : {
          required : true
        },
        targetServerType : {
          required : true
        },
        sourceConfig : {
          required : true
        },
        targetConfig : {
          required : true
        },
        sourceDatabase : {
          required : true
        },
        targetDatabase : {
          required : true
        },
        sourceTable : {
          required : true
        },
        targetTable : {
          required : true
        },
        hadoopQueue : {
          required : true
        }
      },

      messages : { // custom messages for radio buttons and checkboxes
        membership : {
          required : "Please select a Membership type"
        },
        service : {
          required : "Please select  at least 2 types of Service",
          minlength : jQuery.validator.format("Please select  at least {0} types of Service")
        }
      },

      errorPlacement : function(error, element) { // render error placement for
        // each input type
        if (element.parent(".input-group").size() > 0) {
          error.insertAfter(element.parent(".input-group"));
        } else if (element.attr("data-error-container")) {
          error.appendTo(element.attr("data-error-container"));
        } else if (element.parents('.radio-list').size() > 0) {
          error.appendTo(element.parents('.radio-list').attr("data-error-container"));
        } else if (element.parents('.radio-inline').size() > 0) {
          error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
        } else if (element.parents('.checkbox-list').size() > 0) {
          error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
        } else if (element.parents('.checkbox-inline').size() > 0) {
          error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
        } else {
          error.insertAfter(element); // for other inputs, just perform default
          // behavior
        }
      },

      invalidHandler : function(event, validator) { // display error alert on
        // form submit
        success.hide();
        error.show();
        Metronic.scrollTo(error, -200);
      },

      highlight : function(element) { // hightlight error inputs
        $(element).closest('.form-group').addClass('has-error'); // set error
        // class to
        // the control
        // group
      },

      unhighlight : function(element) { // revert the change done by hightlight
        $(element).closest('.form-group').removeClass('has-error'); // set error
        // class to
        // the
        // control
        // group
      },

      success : function(label) {
        label.closest('.form-group').removeClass('has-error'); // set success
        // class to the
        // control group
      },

      submitHandler : function(form) {
        success.show();
        error.hide();
        form.submit(); // submit the form
      }

    });
  }

  var renderTask = function() {
    self.editing = !!$('#hidId').val();
    if (!self.editing) {
      var jobType = $('#hidType').val();
      $('#taskTitle').html('新建数据抽取');
      return;
    }
    $.ajax({
      type : 'POST',
      url : self.contextPath + '/dev/task/api/fetch-task-data-extract',
      data : {
        "id" : $('#hidId').val()
      },
      success : function(result) {
        if (result.status == 'ok') {
          self.task = result.task;
          initEditing();
        } else {
          showError("获取任失败.");
        }
      },
      error : function() {
        showError("获取任务失败.");
      }
    });
  }
  var initEditing = function() {
    console.log(self.task);
    var taskDetails = $.parseJSON(self.task.details);

    $('#jobName').val(self.task.moduleName);
    $('#description').val(self.task.description);
    $('#hidType').val(self.task.type);
    var jobType = self.task.type;
    initServerList();
    $('#taskTitle').html('修改' + '数据抽取');

    // 为了兼容之前配置的抽取job
    var queryDbId = function(serverId, dbName) {
      var dbId = null;
      if (serverId.length <= 0 || dbName.length <= 0)
        return false;
      var data = {
        'serverId' : serverId
      };
      $.ajaxSettings.async = false;
      $.getJSON(self.contextPath + '/dev/task/api/fetch-source-db', data, function(result) {
        if (result.status != 'ok') {
          showError('获取失败 - ' + result.msg);
          return;
        }
        // 关键步骤，遍历一个Json数组
        $(result.serverDb).each(function() {
          if (dbName == this.db_name) {
            dbId = this.id;
            return;
          }
        });
      });
      return dbId
    };

    var queryTableId = function(dbId, tableName) {
      var tableId = null;
      if (dbId.length <= 0 || tableName.length <= 0)
        return false;
      var data = {
        'dbId' : dbId,
        'table' : tableName
      };
      $.ajaxSettings.async = false;
      $.getJSON(self.contextPath + '/dev/task/api/fetch-tables', data, function(result) {
        if (result.status != 'ok') {
          showError('获取失败 - ' + result.msg);
          return;
        }
        // 关键步骤，遍历一个Json数组
        $(result.tables).each(function() {
          if (this.name == tableName) {
            tableId = this.id;
            return;
          }
        });
      });
      return tableId
    };

    // source
    var source = taskDetails.source;
    $('#sourceServerType').val(1).trigger("change");
    // loadServerData('source');
    // $('#sourceConfig').val(source.serverId).trigger("change");
    $('#sourceConfig option:contains("' + source.config + '")').each(function(){
      if($(this).text() == source.config){
        $(this).attr('selected', true).trigger("change");
        return false;
      }
    });
    switch (source.type) {
      case self.taskParams.SOURCE_ETL_SLAVE :
      case self.taskParams.SOURCE_DW_MASTER :
      case self.taskParams.SOURCE_DW_IB :
      case self.taskParams.SOURCE_HIVE :

        if (source.type == self.taskParams.SOURCE_ETL_SLAVE) {
          $('#runMapNum').val(source.mapNum).trigger('change');
        }

        /*
         * $('[name="extractType"][value="' + source.extractType +
         * '"]').attr('checked', 'checked');
         */
        $.uniform.update($('input:radio[name="extractType"][value="' + source.extractType + '"]').prop('checked', true));
        $.uniform.update();
        switch (self.taskParams.EXTRACT_STANDARD) {
          case self.taskParams.EXTRACT_STANDARD :
            /*
             * var dbId = queryDbId($('#sourceConfig').val(), source.database);
             * if (!dbId) { showError('源数据库' + source.database +
             * '没有权限，请到元数据-数据库管理申请权限'); return false; } var tableId =
             * queryTableId(dbId, source.table); if (!tableId) { showError('源表' +
             * source.table + '无法访问，表元数据不存在或者没有表权限'); return false; }
             */
            // $('#sourceDatabase').select2("val", dbId).trigger("change");
            $('#sourceDatabase option:contains("' + source.database + '")').each(function(){
              if($(this).text() == source.database){
                $(this).attr('selected', true).trigger('change');
                return false;
              }
            });
            // $('#sourceTable').select2("val", tableId).trigger("change");
            $('#sourceTable option:contains("' + source.table + '")').each(function(){
              if($(this).text() == source.table){
                $(this).attr('selected', true).trigger('change');
                return false;
              }
            });
            /*
             * if (!source.dbId) { var dbId =
             * queryDbId($('#sourceConfig').val(), source.database); if (!dbId) {
             * showError('源数据库' + source.database + '没有权限，请到元数据-数据库管理申请权限');
             * return false; } var tableId = queryTableId(dbId, source.table);
             * if (!tableId) { showError('源表' + source.table +
             * '无法访问，表元数据不存在或者没有表权限'); return false; }
             * //$('#sourceDatabase').select2("val", dbId).trigger("change");
             * $('#sourceDatabase
             * option:contains("'+source.database+'")').attr('selected',true).trigger('change');
             * //$('#sourceTable').select2("val", tableId).trigger("change");
             * $('#sourceTable
             * option:contains("'+source.table+'")').attr('selected',true).trigger('change'); }
             * else { //$('#sourceDatabase').select2("val",
             * source.dbId).trigger("change"); $('#sourceDatabase
             * option:contains("'+source.database+'")').attr('selected',true).trigger('change');
             * var tableId = source.tableId; if (isNaN(tableId)) { tableId =
             * queryTableId(source.dbId, source.table); } if (!tableId) {
             * showError('源表' + source.table + '无法访问，表元数据不存在或者没有表权限'); break; }
             * $('#sourceTable').select2("val", tableId).trigger("change"); }
             */
            $('#sourceWhere').val(source.where);
            break;

          case self.taskParams.EXTRACT_CUSTOM :
            $('#sourceSql').val(source.sql);
            break;
        }

        break;

      case self.taskParams.SOURCE_HBASE :
        break;

      case self.taskParams.SOURCE_HDFS :
        break;
    }

    // target
    var target = taskDetails.target;
    $('#targetServerType').val(2).trigger("change");
    // loadServerData('target');
    // $('#targetConfig').select2("val", target.serverId).trigger("change");
    // $('#targetConfig
    // option:contains("'+target.config+'")').attr('selected',true).trigger("change");
    $('#targetConfig option[value!="0"]').eq(0).attr('selected', true).trigger("change");
    if(target.type != 2){
      target.type = 2;
    }
    switch (target.type) {
      case self.taskParams.TARGET_DW_STATS :
      case self.taskParams.TARGET_DW_MASTER :
      case self.taskParams.TARGET_DW_IB :

        // $('[name="loadType"][value="' + target.loadType +
        // '"]').attr('checked', 'checked');
        $.uniform.update($('input:radio[name="loadType"][value="' + target.loadType + '"]').prop('checked', true));
        $.uniform.update();
        var loadType = self.taskParams.EXTRACT_STANDARD;
        switch (loadType) {
          case self.taskParams.EXTRACT_STANDARD :
            /*
             * var dbId = queryDbId($('#targetConfig').val(), target.database);
             * if (dbId == null) { showError('目标数据库' + target.database +
             * '没有权限，请到元数据-数据库管理申请权限'); break; } var tableId =
             * queryTableId(dbId, target.table); if (tableId == null) {
             * showError('目标表' + target.table + '无法访问，表元数据不存在或者没有表权限'); break; }
             */
            // $('#targetDatabase').select2("val", dbId).trigger("change");
            $('#targetDatabase option:contains("' + target.database + '")').each(function(){
              if($(this).text() == target.database){
                $(this).attr('selected', true).trigger('change');
                return false;
              }
            });
            // $('#targetTable').select2("val", tableId).trigger("change");
            $('#targetTable option:contains("' + target.table + '")').each(function(){
              if($(this).text() == target.table){
                $(this).attr('selected', true).trigger('change');
                return false;
              }
            });
            /*
             * if (!target.dbId) { var dbId =
             * queryDbId($('#targetConfig').val(), target.database); if (dbId ==
             * null) { showError('目标数据库' + target.database +
             * '没有权限，请到元数据-数据库管理申请权限'); break; } var tableId =
             * queryTableId(dbId, target.table); if (tableId == null) {
             * showError('目标表' + target.table + '无法访问，表元数据不存在或者没有表权限'); break; }
             * $('#targetDatabase').select2("val", dbId).trigger("change");
             * $('#targetTable').select2("val", tableId).trigger("change"); }
             * else { $('#targetDatabase').select2("val",
             * target.dbId).trigger("change"); var tableId = target.tableId; if
             * (isNaN(target.tableId)) { tableId = queryTableId(target.dbId,
             * target.table); } if (!tableId) { showError('目标表' + target.table +
             * '无法访问，表元数据不存在或者没有表权限'); break; } $('#targetTable').select2("val",
             * tableId).trigger("change"); }
             */
            // self.renderTargetFields(target.fields);
            $('#targetWhere').val(target.where);
            $('#postSql').val(target.postSql);
            break;

          case self.taskParams.EXTRACT_CUSTOM :
            $('#targetSql').val(target.sql);
            break;
        }
        break;

      case self.taskParams.TARGET_HIVE :
        // $('[name="loadType"][value="' + target.loadType +
        // '"]').attr('checked', 'checked');
        $.uniform.update($('input:radio[name="loadType"][value="' + target.loadType + '"]').prop('checked', true));
        $.uniform.update();
        var loadType = self.taskParams.EXTRACT_STANDARD;
        switch (loadType) {
          case self.taskParams.EXTRACT_STANDARD :
            // $('#targetDatabase').select2("val", dbId).trigger("change");
            $('#targetDatabase option:contains("' + target.database + '")').each(function(){
              if($(this).text() == target.database){
                $(this).attr('selected', true).trigger('change');
                return false;
              }
            });
            // $('#targetTable').select2("val", tableId).trigger("change");
            $('#targetTable option:contains("' + target.table + '")').each(function(){
              if($(this).text() == target.table){
                $(this).attr('selected', true).trigger('change');
                return false;
              }
            });
            /*
             * if (!target.dbId) { var dbId = queryDbId(target.serverId,
             * target.database); if (dbId == null) { showError('目标数据库' +
             * target.database + '没有权限，请到元数据-数据库管理申请权限'); break; } var tableId =
             * queryTableId(dbId, target.table); if (tableId == null) {
             * showError('目标表' + target.table + '无法访问，表元数据不存在或者没有表权限'); break; }
             * $('#targetDatabase').select2("val", dbId).trigger("change");
             * $('#targetTable').select2("val", tableId).trigger("change"); }
             * else {
             * 
             * var tableId = target.tableId; if (isNaN(target.tableId)) {
             * tableId = queryTableId(target.dbId, target.table); } if (tableId ==
             * null) { showError('目标表' + target.table + '无法访问，表元数据不存在或者没有表权限');
             * break; } $('#targetDatabase').select2("val",
             * target.dbId).trigger("change"); $('#targetTable').select2("val",
             * tableId).trigger("change"); }
             */
            $('#targetPartition').val(target.partition);
            // $('[name="compress"][value="' + (target.compress ? '1' : '0') +
            // '"]').attr('checked', 'checked');
            $.uniform.update($('input:radio[name="compress"][value="' + (target.compress ? '1' : '0') + '"]').prop('checked', true));
            $.uniform.update();
            $('#hiveArgs').val(target.hiveArgs);
            break;

          case self.taskParams.EXTRACT_CUSTOM :
            $('#targetSql').val(target.sql);
            break;
        }
        break;

      case self.taskParams.TARGET_HBASE :
        break;

      case self.taskParams.TARGET_HDFS :
        break;
    };

    // $('#server').select2("val",(taskDetails.serverId==null) ?
    // 24:taskDetails.serverId);
    $('#selUser').val(self.task.ownerId).trigger('change');
    $('#receiver').val(taskDetails.receiver).trigger('change');

    // scheduler, dependencies
    var scheduler = taskDetails.scheduler;
    var dependencies = taskDetails.dependencies;
    self.taskScheduler.loadScheduler(scheduler);
    // loadDependencies(dependencies);

  }
  var mergeTableFields = function(tableFieldsArr) {
    var arr = tableFieldsArr;
    var rst = {}, k;
    for (var i = 0; i < arr.length; i++) {
      k = arr[i].name;
      if (rst[k]) {
        rst[k].type = arr[i].type;
      } else
        rst[k] = arr[i];
    }
    arr = [];
    for (k in rst) {
      arr.push(rst[k]);
    }

    return arr;
  }

  var updateTableFields = function(oldFields, newFields, tagType) {
    var targetType = parseInt($('#targetServerType').val())
    var result = [];
    for (var i = 0; i < oldFields.length; i++) {
      var obj = oldFields[i];
      var name = obj.name;
      var isExist = false;
      for (var j = 0; j < newFields.length; j++) {
        var aj = newFields[j];
        var n = aj.name;
        if (n == name) {
          isExist = true;
          newFields[j].isExist = true;
          break;
        }
      }
      if (isExist) {
        result.push(obj);
      }
    }

    for (var i = 0; i < newFields.length; i++) {
      if (!newFields[i].isExist) {
        if (oldFields.length > 0) {
          // 如果是编辑已经存在的配置，新增字段默认不选中抽取或者导入
          if (tagType == 'target' && targetType == self.taskParams.TARGET_DW_MASTER) {
            newFields[i].load = false;
          } else if (tagType == 'source') {
            newFields[i].extract = false;
          }
        }
        result.push(newFields[i]);
      }
    }
    return result;
  }
  var initSave = function() {
    $('#viewTask').click(function() {
      if (!self.editing) {
        showError("任务不存在.");
      } else {
        self.viewJobUrl = self.contextPath + '/scheduler/task/detail?schedulerId=' + $('#hidId').val();
        window.location.href = self.viewJobUrl;
      }
    });

    $('#saveTask').click(function() {
      var val = function(selector) {
        return $.trim($(selector).val());
      };

      var jobName = val('#jobName');
      if (jobName.indexOf(".") > 0) {
        showError("任务名字不能包含'.'");
        return false;
      }

      var data = {
        'task.moduleName' : jobName,
        'task.type' : $('#hidType').val(),
        'task.ownerId' : val('#selUser'),
        'task.description' : $('#description').val()
      };

      if (!$('#taskConfig').validate().form()) {
        return false;
      }

      /*
       * if (!$('#scheduleConfig').validate().form()) { return false; }
       */

      var details = {};
      // direction
      var source = {
        type : parseInt($('#sourceServerType').val())
      };
      var target = {
        type : parseInt($('#targetServerType').val())
      };

      if (!source.type || !target.type) {
        return showError('请选择数据源和目的地');
      }

      if ($.inArray(target.type, self.taskParams.availableDirection[source.type]) == -1) {
        return showError('无法从数据源' + $('#sourceServerType').select2('data').text + '导入至' + $('#targetServerType').select2('data').text);
      }

      // source
      source.config = $('#sourceConfig').select2('data')[0].text;
      source.serverId = $('#sourceConfig').val();
      switch (source.type) {
        case self.taskParams.SOURCE_ETL_SLAVE :
        case self.taskParams.SOURCE_DW_MASTER :
        case self.taskParams.SOURCE_DW_IB :

          if (source.type == self.taskParams.SOURCE_ETL_SLAVE) {
            source.mapNum = $('#runMapNum').val();
          }

          source.extractType = parseInt($('[name="extractType"]:checked').val());
          // switch (source.extractType) {
          switch (self.taskParams.EXTRACT_STANDARD) {
            case self.taskParams.EXTRACT_STANDARD :
              source.dbId = $('#sourceDatabase').val();
              source.database = $('#sourceDatabase').select2('data')[0].text;
              source.tableId = $('#sourceTable').val();
              source.table = $('#sourceTable').select2('data')[0].text;
              if (!source.database || !source.table) {
                return showError('数据库和表名不能为空');
              }

              source.fields = [];
              $('#sourceFields tr:gt(0)').each(function() {
                var field = {};
                field.name = $('td:eq(0)', this).text();
                field.type = $('td:eq(1)', this).text();
                field.extract = $('td:eq(2) :checkbox', this).is(':checked');
                field.encryption = $('td:eq(3) :checkbox', this).is(':checked');
                if (/char|text|blob/i.test(field.type)) {
                  field.cleanse = true;
                } else {
                  field.cleanse = false;
                }
                // field.cleanse = $('td:eq(3) :checkbox', this).is(':checked');
                source.fields.push(field);
              });

              source.where = val('#sourceWhere');

              break;

            case self.taskParams.EXTRACT_CUSTOM :
              source.sql = val('#sourceSql');
              if (!source.sql) {
                return showError('自定义SQL不能为空');
              }
              break;

            default :
              return showError('请选择抽取方式');
          }
          break;

        case self.taskParams.SOURCE_HIVE :
          source.extractType = parseInt($('[name="extractType"]:checked').val());
          switch (source.extractType) {
            case self.taskParams.EXTRACT_STANDARD :

              source.dbId = $('#sourceDatabase').val();
              source.database = $('#sourceDatabase').select2('data').text;
              source.tableId = $('#sourceTable').val();
              source.table = $('#sourceTable').select2('data').text;
              if (!source.database || !source.table) {
                return showError('数据库和表名不能为空');
              }

              source.fields = [];
              $('#sourceFields tr:gt(0)').each(function() {
                var field = {};
                field.name = $('td:eq(0)', this).text();
                field.type = $('td:eq(1)', this).text();
                field.extract = $('td:eq(2) :checkbox', this).is(':checked');
                field.encryption = $('td:eq(3) :checkbox', this).is(':checked');
                if (/char|text|blob/i.test(field.type)) {
                  field.cleanse = true;
                } else {
                  field.cleanse = false;
                }
                // field.cleanse = $('td:eq(3) :checkbox', this).is(':checked');
                source.fields.push(field);
              });

              source.where = val('#sourceWhere');

              break;

            case self.taskParams.EXTRACT_CUSTOM :
              source.sql = val('#sourceSql');
              if (!source.sql) {
                return showError('自定义SQL不能为空');
              }
              break;

            default :
              return showError('请选择抽取方式');
          }
          break;

        case self.taskParams.SOURCE_HBASE :
          break;

        case self.taskParams.SOURCE_HDFS :
          break;

        default :
          return showError('请选择数据源类型');
      }

      // target
      target.config = $('#targetConfig').select2('data').text;
      target.serverId = $('#targetConfig').val();
      switch (target.type) {
        case self.taskParams.TARGET_DW_STATS :
        case self.taskParams.TARGET_DW_MASTER :
        case self.taskParams.TARGET_DW_IB :
          target.loadType = parseInt($('[name="loadType"]:checked').val());
          // 之前loadType包含标准和自定义，目前含义是批量和分批
          var loadType = self.taskParams.LOAD_STANDARD;
          switch (loadType) {
            case self.taskParams.LOAD_STANDARD :

              target.dbId = $('#targetDatabase').val();
              target.database = $('#targetDatabase').select2('data').text;
              target.tableId = $('#targetTable').val();
              target.table = $('#targetTable').select2('data').text;
              if (!target.database || !target.table) {
                return showError('数据库和表名不能为空');
              }

              target.fields = [];
              $('#targetFields tr:gt(0)').each(function() {
                var field = {};
                field.name = $('td:eq(0)', this).text();
                field.type = $('td:eq(1)', this).text();
                field.load = $('td:eq(2) :checkbox', this).is(':checked');
                target.fields.push(field);
              });

              target.where = val('#targetWhere');
              target.postSql = val('#postSql');
              break;

            case self.taskParams.LOAD_CUSTOM :
              target.sql = val('#targetSql');
              if (!target.sql) {
                return showError('自定义SQL不能为空');
              }
              break;

            default :
              return showError('请选择导入方式');
          }
          break;

        case self.taskParams.TARGET_HIVE :
          // target.loadType = parseInt($('[name="loadType"]:checked').val());
          target.loadType = self.taskParams.LOAD_STANDARD;
          switch (target.loadType) {
            case self.taskParams.LOAD_STANDARD :
              target.dbId = $('#targetDatabase').val();
              target.database = $('#targetDatabase').select2('data')[0].text;
              target.tableId = $('#targetTable').val();
              target.table = $('#targetTable').select2('data')[0].text;
              if (!target.database || !target.table) {
                return showError('数据库和表名不能为空');
              }

              target.fields = [];
              $('#targetFields tr:gt(0)').each(function() {
                var field = {};
                field.name = $('td:eq(0)', this).text();
                field.type = $('td:eq(1)', this).text();
                field.load = $('td:eq(2) :checkbox', this).is(':checked');
                target.fields.push(field);
              });

              target.partition = val('#targetPartition');
              target.compress = $('[name="compress"]:checked').val() == '1';
              target.hiveArgs = val('#hiveArgs');

              break;

            case self.taskParams.LOAD_CUSTOM :
              target.sql = val('#targetSql');
              if (!target.sql) {
                return showError('自定义SQL不能为空');
              }

              target.compress = $('[name="compress"]:checked').val() == '1';
              break;

            default :
              return showError('请选择导入方式');
          }
          break;

        case self.taskParams.TARGET_HBASE :
          break;

        case self.taskParams.TARGET_HDFS :
          break;

        default :
          break;
          //return showError('请选择目的地类型');
      }

      // scheduler, dependencies
      var scheduler = self.taskScheduler.validateScheduler();
      var dependencies = $('#dependencyJobIds').val();

      //target.type=4
      target.type = 4;
      
      $.extend(details, {
        serverId : val('#server'),
        source : source,
        target : target,
        scheduler : scheduler,
        dependencies : dependencies
      });

      data['task.details'] = JSON.stringify(details);

      // id
      if (self.editing) {
        data['task.id'] = $('#hidId').val();
      }
      console.log(data);
      $.post(self.contextPath + '/dev/task/api/save', data, function(result) {

        if (result.status != 'ok') {
          showError(result.msg);
          return;
        }

        toastr['success'](self.editing ? '修改成功' : '保存成功', '提示');
        if (!self.editing) {
          $('#hidId').val(result.id);
          self.editing = true;
        }
        refreshHistory();
      }, 'json');

    });
  }

  var initJobHistory = function() {
    var table = $('#tblHistory');
    self.tblHistory = table.DataTable({
      "bProcessing" : true,
      "language" : {
        "emptyTable" : "无结果",
        "lengthMenu" : "每页&nbsp; _MENU_ &nbsp;项",
        "search" : "查找：",
        "processing" : "正在加载...",
        "info" : "显示 _START_ 到 _END_ 共 _TOTAL_ 条记录",
        "infoEmpty" : "显示  0  到  0 共  0 条记录"
      },
      "info" : false,
      "ordering" : false,
      "paging" : false,
      "searching" : false,
      "serverSide" : false,
      "ajax" : {
        url : self.contextPath + '/dev/task/api/fetch-task-history',
        type : 'POST',
        data : function(d) {
          d.columns = null;
          d.search = null;
          d['id'] = $('#hidId').val(); // self.searchForm.jobName;
        },
        "dataSrc" : function(rs) {
          if (!rs.list) {
            rs.list = [];
          }
          return rs.list;
        },
      },
      "columns" : [{
        data : "created"
      }, {
        data : "user"
      }],
    });
    $('#tblHistory_processing').hide();

    var tableWrapper = jQuery('#tblHistory_wrapper');
  }

  var refreshHistory = function() {
    self.tblHistory.ajax.reload();
  }

  var showLoading = function(flag) {
    if (flag) {
      /*
       * self.dialog = bootbox.dialog({ message: '<p class="text-center">请稍等，正在处理...</p>',
       * closeButton: false });
       */
      $('#loading').modal('show');
    } else {
      // self.dialog.modal('hide');
      $('#loading').modal('hide');
    }
  }

  var compareTableColumns = function() {
    var i = 1;
    $('#sourceCompareColumns tr:gt(0)').remove();
    $('#sourceFields tr:gt(0)').each(function() {
      var field = {};
      field.name = $('td:eq(0)', this).text();
      field.type = $('td:eq(1)', this).text();
      field.extract = $('td:eq(2) :checkbox', this).is(':checked');
      if (field.extract) {
        $("#sourceCompareColumns").append('<tr>' + '<td>' + i + '</td>' + '<td>' + field.name + '</td>' + '<td>' + field.type + '</td>' + '</tr>');
        i++;
      }
    });

    i = 1;
    $('#targetCompareColumns tr:gt(0)').remove();
    $('#targetFields tr:gt(0)').each(function() {
      var field = {};
      field.name = $('td:eq(0)', this).text();
      field.type = $('td:eq(1)', this).text();
      field.load = $('td:eq(2) :checkbox', this).is(':checked');
      if (field.load) {
        $("#targetCompareColumns").append('<tr>' + '<td>' + i + '</td>' + '<td>' + field.name + '</td>' + '<td>' + field.type + '</td>' + '</tr>');
        i++;
      }
    });
    $('#compareColumns').modal('show');

  }

  return {

    init : function(opts) {
      self.contextPath = opts.contextPath;
      self.userId = opts.userId;
      self.taskScheduler = opts.taskScheduler;
      handleSpinners();
      initUserList();
      initReceiverList();
      initServerList();
      initSourceServerType();
      initTargetServerType();
      initServer('source');
      initServer('target');
      initServerDbs('source');
      initServerDbs('target');
      initDbTables('source');
      initDbTables('target');
      initTableField();
      handleValidationTaskConfig();
      renderTask();
      initJobHistory();
      initSave();
    },
    loadTableMetaData : function(tableName) {
      loadTableMetaData(tableName);
    },
    compareTableColumns : function() {
      compareTableColumns();
    }
  }
}();