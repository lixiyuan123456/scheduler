var TaskRunHistory = function () {
    var e = $(this), t = !1, a = function () {
        jQuery().datepicker && ($("#runDate").datepicker({
            rtl: Metronic.isRTL(),
            orientation: "right",
            autoclose: !0,
            format: "yyyy-mm-dd"
        }).on("changeDate", function (a) {
            e.runDate = $.datepicker.formatDate("yy-mm-dd", a.date), t ? e.oTable.ajax.reload() : t = !0
        }), $("#runDate").datepicker("setDate", "-0d"))
    }, o = function () {
        e.jobLevels = [{id: -1, text: "全部"}, {id: 1, text: "一级"}, {id: 2, text: "二级"}, {
            id: 3,
            text: "三级"
        }], $("#jobLevel").select2({
            minimumResultsForSearch: -1, language: {
                noResults: function () {
                    return "无搜索结果"
                }
            }, placeholder: "选择重要等级", data: e.jobLevels
        }).on("change", function (t) {
            e.level = $(this).val(), e.oTable.ajax.reload()
        }), $("#jobLevel").val(-1).trigger('change')
    }, n = function () {
        e.userList = new Array, e.userList.push({
            id: -1,
            text: "全部"
        }), $.post(e.contextPath + "/user/api/list-user", function (t, a) {
            _.each(t.userList, function (t) {
                return e.userId == t.id ? void e.userList.push({
                    id: t.id,
                    text: t.trueName,
                    selected: !0
                }) : void e.userList.push({id: t.id, text: t.trueName, selected: !1})
            }), $("#selUser").select2({
                language: {
                    noResults: function () {
                        return "无搜索结果"
                    }
                }, placeholder: "选择用户", data: e.userList
            }).on("change", function (t) {
                e.userId = $(this).val(), e.oTable.ajax.reload()
            }), $("#selUser").val(e.userId).trigger('change')
        })
    }, s = function () {
        e.jobStatus = [
        	{id: -1, text: "全部"}, 
        	{id: 0, text: "未调度"},
        	{id: 1, text: "等待信号"},
        	{id: 2, text: "正在运行"},
        	{id: 3,text: "运行成功"},
        	{id: 4, text: "运行失败"},
        	{id: 5, text: "被kill"},
        	{id: 6, text: "等待资源"},
        	{id: 7,text: "解析失败"},
        	{id: 8,text: "暂停"},
        	{id: 9,text: "重复提交"},
        	{id: 10,text: "运行中断"},
        	{id: 99,text: "killing"}
        ], $("#jobStatus").select2({
            minimumResultsForSearch: -1, language: {
                noResults: function () {
                    return "无搜索结果"
                }
            }, placeholder: "选择运行状态", data: e.jobStatus
        }).on("change", function (t) {
            e.jobState = $(this).val(), e.oTable.ajax.reload()
        }), $("#jobStatus").val(-1).trigger('change')
    }, w = function () {
        e.scheduleLevels = [
            {id: -1, text: "全部"},
            {id: 1, text: "分钟"},
            {id: 2, text: "小时"},
            {id: 3, text: "天"}
        ], $("#scheduleLevel").select2({
            minimumResultsForSearch: -1, language: {
                noResults: function () {
                    return "无搜索结果"
                }
            }, placeholder: "选择调度级别", data: e.scheduleLevels
        }).on("change", function (t) {
            console.log(e)
            e.scheduleLevel = $(this).val(), e.oTable.ajax.reload()
        }), $("#scheduleLevel").val(-1).trigger('change')
    }, i = function () {
        setTimeout(function () {
            var e = $(".tooltips");
            e.each(function () {
                $(this).tooltip()
            })
        }, 0)
    }, l = function () {
        var t = $("#dataTable");
        e.oTable = t.DataTable({
            ordering: false,
            paging: true,
            searching: false,
            serverSide: true,
            ajax: {
                url: e.contextPath + "/scheduler/task/api/search-task-run-history",
                type: "POST",
                data: function (t) {
                    t.columns = null, t.search = null, t["searchForm.jobLevel"] = e.level, t["searchForm.userId"] = e.userId, t["searchForm.createDt"] = e.runDate, t["searchForm.jobState"] = e.jobState, t["searchForm.scheduleLevel"] = e.scheduleLevel, t["searchForm.jobName"] = $("#kw").val()
                },
                dataSrc: function (e) {
                    return e.data
                }
            },
            fnDrawCallback: function (e, t) {
                i()
            },
            columns: [
            	{data: "id"}, 
            	{data: null, sWidth: "28%", render: function (t, a, o, n) {
                    var s = t.jobName;
                    return s && s.length > 40 && (s = s.substring(0, 40) + "..."), ' <a target="_blank" href = "' + e.contextPath + "/scheduler/task/detail?schedulerId=" + t.jobId + '" target="_blank">' + s + "</a>"
                    }
            	},
            	{data: "chooseRunTime", sWidth: "14%"},
            	{data: "executeTime", sWidth: "14%"},
            	{data: "executeEndTime", sWidth: "14%"},
            	{
            		data: null, render: function (e, t, a, o) {
	                    jobState = e.jobState;
	                    var n = Date.parse(new Date);
	                    jobState >= 3 && e.executeEndTime && (n = Date.parse(new Date(e.executeEndTime)));
	                    if(e.executeTime != null && e.executeTime.length > 0) {
	                        var s = Date.parse(new Date(e.executeTime)), i = n - s, l = Math.floor(i / 864e5), r = i % 864e5,
	                            c = Math.floor(r / 36e5), d = r % 36e5, u = Math.floor(d / 6e4), b = d % 6e4,
	                            p = Math.round(b / 1e3), g = l > 0 ? l + "Day " : "";
	                        return g += c > 0 ? c + "h " : "", g += u > 0 ? u + "m " : "", g += p > 0 ? p + "s" : "0s"
	                    } else {
	                        return "";
	                    }
	                }
            	},
            	{
            		data: null, render: function (e, t, a, o) {
            			var html = 
            			0 == e.jobState ? "<span class='label bg-yellow'>未调度</span>" :
                    	1 == e.jobState ? "<span class='label bg-yellow-casablanca'>等待信号</span>" : 
                    	2 == e.jobState ? "<span class='label bg-blue'>正在运行</span>" : 
                    	3 == e.jobState ? "<span class='label bg-green'>运行成功</span>" :
                    	4 == e.jobState ? "<span class='label bg-red'>运行失败</span>" : 
                    	5 == e.jobState ? "<span class='label bg-red-intense'>被kill</span>" : 
                    	6 == e.jobState ? "<span class='label bg-yellow-casablanca'>等待资源</span>" : 
                    	7 == e.jobState ? "<span class='label bg-red-thunderbird'>解析失败</span>" : 
                    	8 == e.jobState ? "<span class='label bg-yellow-lemon'>暂停</span>" :
                    	9 == e.jobState ? "<span class='label bg-grey'>重复提交</span>" :
                    	10 == e.jobState ? "<span class='label bg-red-intense'>运行中断</span>" :
                    	99 == e.jobState ? "<span class='label bg-red-intense'>killing</span>" : 
                    	"";
            			return html;
            		}
            	}, 
            	{
	                data: null, render: function (e, t, a, o) {
	                    var n = "";
	                    n = 1 == e.jobState ? "<a href='javascript: void(0)' onclick='TaskRunHistory.optionHandle(1, " + e.id + ", " + e.jobId + ")' class='btn btn-xs yellow tooltips'  data-original-title='取消等待' data-toggle='tooltip'  data-container='body' style='display: inline; visibility: hidden'><i class='fa fa-rotate-left'></i></a>" : 2 == e.jobState ? '<a href="javascript: void(0)" class="btn btn-xs red tooltips" NaN onclick="TaskRunHistory.optionHandle(2, ' + e.id + ", " + e.jobId + ')" ><i class="fa fa-pause"></i></a>' : "";
	                    var i = "<a href='javascript: void(0)' onclick='newTailLogFile(" + e.id + ", " + "1" + ",\"\")' id='logReader_"+ e.id +"' data-ws='"+e.logReaderWs+"' class='btn btn-xs blue tooltips'  data-original-title='查看日志' data-toggle='tooltip'  data-container='body' style='display: inline;'><i class='fa fa-search'></i></a>";
	                    return i + n
	                }
            	}
            ]
        }), $("#dataTable_processing").hide()
    }, r = function (t, a) {
        bootbox.confirm("确认要终止吗？", function (o) {
            o && $.ajax({
                type: "POST",
                url: e.contextPath + "/old-page/dev/task/killRunningJob",
                async: !1,
                data: {excuteId: t, schedulerId: a},
                dataType: "json",
                success: function (t) {
                  console.log(t);
                    if (t == 'true') {
                        toastr.success("操作成功", "提示");
                        var a = e.oTable.page.info().page;
                        e.oTable.page(a).draw(!1)
                    } else toastr.error(t.message)
                }
            })
        })
    }, c = function (t, a) {
        bootbox.confirm("确认要终止吗？", function (a) {
            a && $.ajax({
                type: "POST",
                url: e.contextPath + "/old-page/dev/task/stopPendingJob",
                async: !1,
                data: {excuteId: t},
                dataType: "json",
                success: function (t) {
                    if ("true" == t) {
                        var a = e.oTable.page.info().page;
                        e.oTable.page(a).draw(!1), toastr.success("操作成功", "提示")
                    } else toastr.error("操作失败", "错误")
                },
                error: function () {
                    toastr.error("操作失败", "错误")
                }
            })
        })
    };
    return {
        init: function (t) {
            e.contextPath = t.contextPath, e.userId = t.userId, e.status = -1, e.level = -1, e.runDate = $.datepicker.formatDate("yy-mm-dd", new Date), a(),l(), o(), n(), s(), w(), $("#doSearch").on("click", function () {
                e.oTable.ajax.reload()
            }), $("#kw").on("keypress", function (t) {
                if (13 == t.keyCode) {
                    var a = e.oTable.page.info().page;
                    e.oTable.page(a).draw(!1)
                }
            })
        }, optionHandle: function (e, t, a) {
            1 == e ? c(t, a) : 2 == e && r(t, a)
        }
    }
}();
$(function () {
    currentDate = "", $.fn.modal.defaults.minHeight = function () {
        return $(window).height() - 100
    };
    var e = ace.edit("logView");
    e.getSession().setMode("ace/mode/sql"), e.setReadOnly(!0), e.setOption("maxLines", 30), e.setOption("minLines", 25), e.setAutoScrollEditorIntoView(!0), e.getSession().selection.on("changeSelection", function (e) {
    }), $("#logView").data("editor", e)
});
var firstconnect = !0, socket, initSocket = function (e) {
    socket = 1 == $("#deptId").val() || 202 == $("#deptId").val() ? io.connect("http://10.126.92.71:8000") : io.connect("http://10.126.81.130:8000");
    socket.on("connect", function () {
        console.log("Connected to:", socket.host), socket.emit("filepath", e)
    }), socket.on("message", function (e) {
        if (e.receive && (console.log("have Received message"), socket.emit("showlog", "")), e.filename, e.tail) {
            var t = e.tail, a = $("#logView").data("editor");
            a.setValue(a.getValue() + t, 1), a.getSession().selection.clearSelection()
        }
    })
}, tailLogFile = function (e, t, a) {
    var o = t + "_excuteId_" + e + "_" + a + ".log", 
    n = "/data/mq_log/schedule_log/excute_logs/" + o;
    $("#modalEdit .title").html(n),
    $("#modalEdit").modal("show"),
    firstconnect ? (firstconnect = !1, initSocket(n)) : ($("#logView").data("editor").setValue(""), socket.emit("filepath", n))
}, getLogFromHbase = function (e, t) {
    $("#modalEdit .title").html(t), $("#modalEdit").modal("show");
    var a = $("#logView").data("editor");
    a.setValue(""), a.getSession().selection.clearSelection(), $.ajax({
        type: "POST",
        url: contextPath + "/viewJobRunLog",
        async: !1,
        data: {excuteId: e},
        dataType: "json",
        success: function (e) {
            $.each(e, function (e, t) {
                var o = /runlog\:([a-zA-Z]+)\d+/;
                array = e.match(o), a.setValue(a.getValue() + array[1] + " " + t + "\n", 1), a.getSession().selection.clearSelection()
            })
        },
        error: function () {
            toastr.error("获取失败", "错误"), $("#modalEdit").modal("hidden")
        }
    })
};

var newfirstConnect = 1, 
newSocket, 
newInitSocket = function(e) {
    console.log('job execute id ='+e);
    $("#logView").data("editor").setValue("");
    var key = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
    /*
     * $.ajax({ type: 'get', url: '/socket.io/getUniqueKey', async: false,
     * success:function (data) { key = data; } });
     */
    var url = $('#logReader_'+e).attr('data-ws');
    /*
     * $.ajax({ url:'/consts/websocket-hadoop-job-execute-log-reader-url',
     * dataType:'json', async:false, success:function(data){ if(data){ url =
     * data.const; }else{ alert("从配置文件中读取websocket地址失败"); return; } } });
     */
    if(key != null) {
        if ('WebSocket' in window) {
            // newSocket = new
            // WebSocket("ws://zzdp.zhuanspirit.com/socket.io/1/websocket/"+key);
            // newSocket = new
            // WebSocket("ws://127.0.0.1:8081/socket.io/1/websocket/"+key);
            // newSocket = new
            // WebSocket("ws://192.168.187.213:8081/socket.io/1/websocket/"+key);
        	// newSocket = new
            // WebSocket("ws://10.126.88.226:8081/socket.io/1/websocket/"+key);
        	// newSocket = new
            // WebSocket("ws://10.148.15.10:8081/socket.io/1/websocket/"+key);
        	newSocket = new WebSocket(url);
        	console.log("link success")
        } else {
            alert('Not support websocket')
        }
        // 连接发生错误的回调方法
        newSocket.onerror = function () {
            console.log("error")
        };

        // 连接成功建立的回调方法
        newSocket.onopen = function (event) {
            newSocket.send(e);
            console.log(event);
        }
        // 接收到消息的回调方法
        newSocket.onmessage = function (event) {
            var a = $("#logView").data("editor");
            if(event.data == "clearFlag-"+key) {
                a.setValue("");
            } else {
                a.setValue(a.getValue() + event.data, 1), a.getSession().selection.clearSelection();
            }
        }

        // 连接关闭的回调方法
        newSocket.onclose = function () {
            console.log("close")
        }

        // 监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。
        window.onbeforeunload = function () {
            newSocket.close();
        }
        newfirstConnect = 0;
    }
}, 
newTailLogFile = function (e, t, a) {
    //var o = ($("#jobType").val(), t + "_excuteId_" + e + "_" + a + ".log"),
    var executeId = e;
    $("#modalEdit .title").html(executeId), 
    $("#modalEdit").modal("show"),
    newSocket != undefined && newSocket != null ? (newSocket.close(),newInitSocket(executeId)) : newInitSocket(executeId)
    //newfirstConnect ? (newInitSocket(n)) : ($("#logView").data("editor").setValue(""), newSocket.send(n))
}
// # sourceMappingURL=task-run-history-2ab18ed6d8.min.js.map
