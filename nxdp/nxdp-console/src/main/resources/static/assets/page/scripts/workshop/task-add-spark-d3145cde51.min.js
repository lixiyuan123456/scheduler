var TaskAdd = function () {
    var e = $(this);
    $.ajaxSetup({async: !1}), String.prototype.startWith = function (e) {
        var r = new RegExp("^" + e);
        return r.test(this)
    }, String.prototype.endWith = function (e) {
        var r = new RegExp(e + "$");
        return r.test(this)
    };
    var r = function (e) {
        return "" == e || null == e || void 0 == e ? !0 : !1
    }, t = function () {
        e.sparkVersion = [
        	/*
             * {id: "1.4", text: "1.4"}, {id: "1.5", text: "1.5"}, {id: "1.6",
             * text: "1.6"}, {id: "2.0",text: "2.0"}
             */
        	{id: "2.2.1", text: "2.2.1"},
        	{id: "2.3.1", text: "2.3.1"}
        	], $("#spark-version").select2(/*
                                             * { minimumResultsForSearch: -1,
                                             * language: { noResults: function () {
                                             * return "无搜索结果" } },placeholder:
                                             * "选择重要等级", data: e.sparkVersion }
                                             */).on("change", function (e) {
        }), $("#spark-version").val("2.2.1").trigger('change');
    }, a = function () {
        e.userList = new Array, $.post(e.contextPath + "/user/api/list-user", function (r, t) {
            _.each(r.userList, function (r) {
                return e.userId == r.id ? void e.userList.push({
                    id: r.id,
                    text: r.trueName + "-" + r.userName,
                    selected: !0
                }) : void e.userList.push({id: r.id, text: r.trueName + "-" + r.userName, selected: !1})
            }), $("#selUser").select2({
                language: {
                    noResults: function () {
                        return "无搜索结果"
                    }
                }, placeholder: "选择用户", data: e.userList
            }).on("change", function (e) {
            }),$("#selUser").val(e.userId).trigger('change');
        })
    }, s = function () {
        e.receiverList = new Array, $.post(e.contextPath + "/user/api/list-user", function (r, t) {
            _.each(r.userList, function (r) {
                return e.userId == r.id ? void e.receiverList.push({
                    id: r.id,
                    text: r.trueName+"(" + r.userName +")",
                    selected: !0
                }) : void e.receiverList.push({id: r.id, text: r.trueName + "(" + r.userName + ")", selected: !1})
            }), $("#receiver").select2({data: e.receiverList,multiple:true,}), $("#receiver").val(e.userId).trigger('change');
        })
    }, i = function () {
        var r;
        $("#hidType").val();
        r = {
            serverType: 2,
            localType: 2
        }, e.serverList = new Array, $.post(e.contextPath + "/dev/task/api/list-hdp-clusters", r, function (r, t) {
            _.each(r.serverConfig, function (r) {
                e.serverList.push({id: r.id, text: r.clusterName, selected: !1})
            }), $("#server").select2({
                language: {
                    noResults: function () {
                        return "无搜索结果"
                    }
                }, placeholder: "选择服务器", data: e.serverList
            }).on("change", function (e) {
            }),$("#server").select2({data: e.serverList}), $("#server").val('2').trigger('change');
        })
    }, n = function () {
        $.ajaxSetup({async: !0}), $("#jobFile").fileinput({
            language: "zh",
            showPreview: !1,
            showUpload: !0,
            uploadUrl: e.contextPath + "/dev/task/uploadFile",
            allowedFileExtensions: ["jar", "py", "sh"],
            elErrorContainer: "#errorBlock"
        }), $("#jobFile").on("fileuploaded", function (e, r) {
            var t = r.response;
            "true" == t.result ? ($("#filePath").val(t.filePath), $("#fileName").val(t.fileName), $("#newFileName").val(t.newFileName), o(), toastr.success("文件上传成功.", "提示"), $("#fileUploadState").html(t.fileName + " 上传成功"), $("#uploadFlag").val(1)) : "tooBig" == t.result ? (toastr.error("上传文件太大,请重新新上传", "错误"), $("#uploadFlag").val(0)) : (toastr.error(t.errorMsg, "错误"), $("#uploadFlag").val(0))
        })
    }, o = function () {
        $("#checkDefaultName").is(":checked") && $("#jobName").val(l())
    }, l = function () {
        var e = $("#fileName").val();
        if (!e) return "";
        var r = e.lastIndexOf("/");
        return -1 != r && (e = e.substring(r + 1)), e = e.endWith(".jar") ? e.replace(".jar", "") : $.trim(e.split(/\./)[0])
    }, c = function () {
        var e = $("#taskConfig"), r = $(".alertInfo"), t = $(".alert-danger", r), a = $(".alert-success", r);
        e.validate({
            errorElement: "span",
            errorClass: "help-block help-block-error",
            focusInvalid: !1,
            ignore: "",
            rules: {
                jobName: {required: !0},
                description: {required: !0},
                server: {required: !0},
                hadoopQueue: {required: !0}
            },
            messages: {
                membership: {required: "Please select a Membership type"},
                service: {
                    required: "Please select  at least 2 types of Service",
                    minlength: jQuery.validator.format("Please select  at least {0} types of Service")
                }
            },
            errorPlacement: function (e, r) {
                r.parent(".input-group").size() > 0 ? e.insertAfter(r.parent(".input-group")) : r.attr("data-error-container") ? e.appendTo(r.attr("data-error-container")) : r.parents(".radio-list").size() > 0 ? e.appendTo(r.parents(".radio-list").attr("data-error-container")) : r.parents(".radio-inline").size() > 0 ? e.appendTo(r.parents(".radio-inline").attr("data-error-container")) : r.parents(".checkbox-list").size() > 0 ? e.appendTo(r.parents(".checkbox-list").attr("data-error-container")) : r.parents(".checkbox-inline").size() > 0 ? e.appendTo(r.parents(".checkbox-inline").attr("data-error-container")) : e.insertAfter(r)
            },
            invalidHandler: function (e, r) {
                a.hide(), t.show(), Metronic.scrollTo(t, -200)
            },
            highlight: function (e) {
                $(e).closest(".form-group").addClass("has-error")
            },
            unhighlight: function (e) {
                $(e).closest(".form-group").removeClass("has-error")
            },
            success: function (e) {
                e.closest(".form-group").removeClass("has-error")
            },
            submitHandler: function (e) {
                a.show(), t.hide(), e.submit()
            }
        })
    }, d = function () {
        $("#checkDefaultName").iCheck("check")
    }, u = function () {
        var r = $("#hidType").val();
        return e.editing = !!$("#hidId").val(), e.editing ? void $.ajax({
            type: "POST",
            url: e.contextPath + "/dev/task/api/fetch-task",
            data: {id: $("#hidId").val()},
            success: function (r) {
                "ok" == r.status ? (e.task = r.task, p()) : toastr.error("获取任失败.", "提示")
            },
            error: function () {
                toastr.error("获取任务失败.", "提示")
            }
        }) : ($("#taskTitle").html("新建" + (7 == r ? "SPARK脚本" : "Spark-Streaming")), 12 == r && $("#tab_2_schedule").addClass("hidden"), void d())
    }, p = function () {
        console.log(e.task);
        writeRelationDataBack(e.task);
        var r = $.parseJSON(e.task.details);
        $("#jobName").val(e.task.jobName),
        $("#description").val(e.task.description),
        $("#hidType").val(e.task.type);
        var t = e.task.type;
        $("#taskTitle").html("修改" + (7 == t ? "SPARK脚本" : "Spark-Streaming")),
        12 == t && $("#tab_2_schedule").addClass("hidden"),
        $("#server").val(r.serverId).trigger("change"),
        $("#selUser").val(e.task.userId).trigger('change'),
        $("#receiver").val(r.receiver).trigger('change'),
        $("#filePath").val(r.filePath),
        $("#fileName").val(r.fileName),
        $("#fileUploadState").html(r.fileName),
        $("#newFileName").val(r.newFileName),
        $("#jobPackage").val(r.jobPackage),
        $("#spark-master").val(r.sparkMaster),
        $("#spark-version").val(r.sparkVersion).trigger('change'),
        $("#numExecutors").val(r.numExecutors),
        $("#executorCores").val(r.executorCores),
        $("#executorMemory").val(r.executorMemory),
        $("#sparkOtherArgs").val(r.sparkOtherArgs),
        $('#isPySpark').prop('checked', r.isPySpark == 1).change(),
        $("#mainClassArgs").val(r.mainClassArgs),
        $("#jobName").val() == l() && d();
        var a = r.scheduler;
        r.dependencies;
        e.taskScheduler.loadScheduler(a)
    }, v = function () {
        $("#viewTask").click(function () {
            e.editing ? (e.viewJobUrl = e.contextPath + "/scheduler/task/detail?schedulerId=" + $("#hidId").val(), window.location.href = e.viewJobUrl) : toastr.error("任务不存在.", "提示")
        }), $("#saveTask").click(function () {
            var t = function (e) {
                return toastr.error(e, "提示"), !1
            }, a = function (e) {
                return $.trim($(e).val())
            }, s = a("#jobName"), i = a("#fileName");
            if (r(i)) return t("文件未上传或者上传失败"), !1;
            // 校验spark-version
            if($('#spark-version').val() == ''){
              return t("请选择spark版本"), !1;
            }
            var n = {
                "jobName": s,
                "type": $("#hidType").val(),
                "userId": a("#selUser"),
                "description": $("#description").val(),
                'outputMode': $('#taskConfig input[name="outputMode"]:checked').val(),
                'outputModeValue': $('#taskConfig input[name="outputMode"]:checked').val() == 1 ? $('#taskConfig select[name="outputModeValue"]').val() : $('#taskConfig input[name="outputModeValue"]').val(),
            };
            if (!$("#taskConfig").validate().form()) return !1;
            if (!$("#scheduleConfig").validate().form()) return !1;
            var o = {};
            $.extend(o, {
                fileName: a("#fileName"),
                newFileName: a("#newFileName"),
                filePath: a("#filePath"),
                uploadFlag: a("#uploadFlag"),
                jobPackage: a("#jobPackage"),
                serverId: a("#server"),
                out: packRelationData(),
            }), $.extend(o, {
                sparkMaster: a("#spark-master"),
                sparkVersion: $('#spark-version').val(),
                numExecutors: a("#numExecutors"),
                executorCores: a("#executorCores"),
                executorMemory: a("#executorMemory"),
                sparkOtherArgs: a("#sparkOtherArgs"),
                mainClassArgs: a("#mainClassArgs"),
                isPySpark: $('#isPySpark').prop('checked') == true ? 1 : 0,
            });
            var l = e.taskScheduler.validateScheduler(), c = $("#dependencyJobIds").val();
            $.extend(o, {
                scheduler: l,
                dependencies: c
            }), n["details"] = JSON.stringify(o), e.editing && (n["id"] = $("#hidId").val()), console.log(n), $.post(e.contextPath + "/dev/task/api/save-file-job", n, function (r) {
                return "ok" != r.status ? void toastr.error(r.msg) : (toastr.success(e.editing ? "修改成功" : "保存成功", "提示"), e.editing || ($("#hidId").val(r.id), e.editing = !0), void f())
            }, "json")
        })
    }, h = function () {
        var r = $("#tblHistory");
        e.tblHistory = r.DataTable({
            bProcessing: !0,
            language: {
                emptyTable: "无结果",
                lengthMenu: "每页&nbsp; _MENU_ &nbsp;项",
                search: "查找：",
                processing: "正在加载...",
                info: "显示 _START_ 到 _END_ 共 _TOTAL_ 条记录",
                infoEmpty: "显示  0  到  0 共  0 条记录"
            },
            info: !1,
            ordering: !1,
            paging: !1,
            searching: !1,
            serverSide: !1,
            ajax: {
                url: e.contextPath + "/dev/task/api/fetch-file-history", type: "POST", data: function (e) {
                    e.columns = null, e.search = null, e.id = $("#hidId").val()
                }, dataSrc: function (e) {
                    return e.list || (e.list = []), e.list
                }
            },
            columns: [{data: "updateTime"}, {data: "operatorName"}, {data: "fileName"}, {
                data: null,
                render: function (r, t, a, s) {
                    var i = e.contextPath + "/dev/task/downloadFile?fileName=" + r.filepath + "&realFileName=" + r.fileName;
                    return '<a href="' + i + '" class="downloadInNewWindow">下载</a>'
                }
            }]
        }), $("#tblHistory_processing").hide();
        jQuery("#tblHistory_wrapper")
    }, f = function () {
        e.tblHistory.ajax.reload()
    };
    return {
        init: function (r) {
            e.contextPath = r.contextPath, e.userId = r.userId, e.taskScheduler = r.taskScheduler, a(), s(), t(), n(), i(), c(), u(), h(), v()
        }
    }
}();
// # sourceMappingURL=task-add-spark-d3145cde51.min.js.map
