var contextPath = "";
function viewJobRelation(e, t) {
    var a = 1;
    $("#chkJobRelation").is(":checked") && (a = 0), $.ajax({
        type: "POST",
        url: contextPath + "/scheduler/task/api/getDependentRelationsAction",
        async: !1,
        data: {jobId: e, jobName: t, isSimple: a},
        dataType: "json",
        beforeSend: function (e) {
            $("#jobRelationId").html('<h3 align="center">请稍等...</h3>')
        },
        success: function (e) {
            $("#jobRelationId").html(e);
            var t = $("#tt").tabs("getSelected"), a = $("#tt").tabs("getTabIndex", t);
            $("#tt").tabs("select", a)
        }
    })
}

function killRunningJob(e) {
    bootbox.confirm("确认要终止吗？", function (t) {
        var a = $("#schedulerId").val();
        t && $.ajax({
            type: "POST",
            url: contextPath + "/old-page/dev/task/killRunningJob",
            async: !1,
            data: {excuteId: e, schedulerId: a},
            dataType: "json",
            success: function (t) {
              console.log(t);
                if (t == 'true') {
                    $("#killJob-" + e).attr("disabled", "disabled"), toastr.success("操作成功", "提示")
                } else toastr.error(t.message)
            }
        })
    })
}

function stopPendingJob(e, t) {
    $.ajax({
        type: "POST",
        url: contextPath + "/old-page/dev/task/stopPendingJob",
        async: !1,
        data: {excuteId: e},
        dataType: "json",
        success: function (e) {
            if ("true" == e) {
                var a = '<span class="label bg-red">被kill</span>';
                $("#jobState-" + t).html(a), $("#runJob-" + t).attr("disabled", "disabled"), toastr.success("操作成功", "提示")
            } else toastr.error("操作失败", "错误")
        }
    })
}

function runjobAlone() {
    var e = $("#schedulerId").val(), t = initTestInput(), parallelRun = $('#parallelRun').val();
    currentDate = "", $.ajax({
        type: "POST",
        url: contextPath + "/old-page/dev/task/runJobAloneByManualAction",
        async: !1,
        data: {schedulerId: e, detail: JSON.stringify(t)},
        dataType: "json",
        success: function (e) {
            "true" == e ? (toastr.success("操作成功", "提示"), 1 == t.runMode ? $("#testJob").attr("disabled", "disabled") : 0 == parallelRun && $("#runJob").attr("disabled", "disabled")) : toastr.error("运行失败", "错误"), $("#modalEdit2").modal("hide")
        },
        error: function () {
            toastr.error("运行失败", "错误"), $("#modalEdit2").modal("hide")
        }
    })
}

function initTestInput() {
    var e = function (e) {
        return $.trim($(e).val())
    }, t = "", a = (e("#id_output"), {});
    return $.extend(a, {
        inputPath: e("#id_input"),
        outputPath: t,
        runMode: e("#runModeId"),
        runDateTime: currentDate,
        otherArgs: e("#id_otherArgs")
    }), a
}

function reRunjobAlone(e) {
    $.ajax({
        type: "POST",
        url: contextPath + "/old-page/dev/task/reRunJobAloneByManualAction",
        async: !1,
        data: {executeId: e},
        dataType: "json",
        success: function (t) {
            "true" == t ? (toastr.success("提交成功", "提示"), $("#reRunJob" + e).attr("disabled", "disabled")) : toastr.error("运行失败", "错误")
        }
    })
}

var TaskDetail = function () {
    var self = $(this), initReceiver = function () {
        var e = self.receiver.split(","), t = "";
        $.post(self.contextPath + "/user/api/list-user", function (a, o) {
            _.each(a.userList, function (a) {
                _.each(e, function (e) {
                    e == a.id && (t = t + a.trueName + ",")
                })
            }), t.length > 1 && (t = t.substring(0, t.length - 1)), $("#receiver").html(t)
        })
    }, initHadoopQueue = function () {
        $.post(self.contextPath + "/hadoop/api/getHadoopQueueByDept", {deptId: self.ownerDpID}, function (data, status) {
            data && _.each(eval(data), function (e) {
                "" != self.hadoopQueueId && e.id == parseInt(self.hadoopQueueId) && $("#hadoopQueueId").html(e.name)
            })
        })
    }, initDelayFlag = function () {
        setSwitchbuttonValue("#isDelay", self.isDelay), 3 != self.userRole && 0 == self.isDelay && $("#isDelay").bootstrapToggle("disable"), $("#isDelay").change(function () {
            var e = $(this).prop("checked") ? 0 : 1;
            $(this).attr("value", e), $.getJSON(self.contextPath + "/scheduler/task/api/update-job-delayFlag", {
                schedulerId: $("#schedulerId").val(),
                isDelay: e
            }, function (t) {
                return "success" != t.status ? void toastr.error(t.msg, "提示") : (toastr.success("操作成功", "提示"), void(self.isDelay = e))
            }).always(function () {
            })
        })
    }, setSwitchbuttonValue = function (e, t) {
        switch (t = parseInt(t)) {
            case 0:
                $(e).bootstrapToggle("on"), $(e).attr("value", 0);
                break;
            case 1:
                $(e).bootstrapToggle("off"), $(e).attr("value", 1)
        }
    }, initCharts = function () {
        $.getJSON(self.contextPath + "/scheduler/task/api/draw-job-charts", {jobId: $('#jobId').val()}, function (e) {
            $("#container1").highcharts({
                credits: {enabled: !1},
                global: {useUTC: !1},
                chart: {zoomType: "x", spacingRight: 20},
                title: {text: "最近一周耗时走势", x: -20},
                subtitle: {text: "Source: ETL Log", x: -20},
                xAxis: {
                    title: {text: "运行日期"},
                    type: "datetime",
                    minTickInterval: 864e4,
                    dateTimeLabelFormats: {
                        second: "%H:%M:%S",
                        minute: "%H:%M",
                        hour: "%H:%M",
                        day: "%m-%d",
                        week: "%m-%d",
                        month: "%Y-%m",
                        year: "%Y"
                    }
                },
                yAxis: {title: {text: "运行时间 (秒)"}, plotLines: [{value: 0, width: 1, color: "#808080"}]},
                tooltip: {valueSuffix: "秒"},
                legend: {layout: "vertical", align: "right", verticalAlign: "top", borderWidth: 0, floating: !0},
                series: [{name: self.jobName, data: e.jobRun}]
            })
        })
    }, initElementEvents = function () {
        $("#viewJobKeyPath").on("click", function () {
            showJobKeyPath()
        }), $(".nav-tabs li").on("click", function () {
            var e = $(this).find("a").attr("href");
            location.hash = e
        })
    }, initGeneralCheckEvents = function () {
        $("table").delegate("input[name='general-check']", "change", function () {
            var e = $(this).attr("data-tableId"), t = $(this).attr("data-name"),
                a = {tableName: t, tableId: e, deptId: self.deptId, schedulerId: self.schedulerId}, o = $(this);
            $(this).prop("checked") ? (a.checkStatus = 1, bootbox.dialog({
                title: "输入检测Where条件",
                message: '<div class="row"><div class="form-group"><div class="col-md-12"><input type="text" id="checkWhere" name="checkWhere"  class="form-control" placeholder="例子:cal_dt=${dealDate}"></div></div></div>',
                buttons: {
                    success: {
                        label: "<i class='icon-ok'></i> 保存",
                        className: "btn-sm btn-success",
                        callback: function () {
                            var e = $("#checkWhere").val();
                            a.checkWhere = e, console.log(a), generalCheckChange(a)
                        }
                    },
                    cancel: {
                        label: "<i class='icon-info'></i> 取消",
                        className: "btn-sm btn-danger",
                        callback: function () {
                            o.prop("checked", !1)
                        }
                    }
                }
            })) : (a.checkStatus = 2, bootbox.confirm("确定需要取消该表通用数据检测!", function (e) {
                e ? (console.log(a), generalCheckChange(a)) : o.prop("checked", !0)
            }))
        }), $("table").delegate(".remove", "click", function () {
            var e = $(this).attr("data-id");
            console.log(e), removeJobTable(e)
        }), $("table").delegate(".tableWhere", "click", function () {
            var e = $(this).attr("data-tableId"), t = $(this).attr("data-name"),
                a = {tableName: t, tableId: e, deptId: self.deptId, schedulerId: self.schedulerId};
            a.checkStatus = 1, bootbox.dialog({
                title: "编辑检测Where条件",
                message: '<div class="row"><div class="form-group"><div class="col-md-12"><input type="text" id="checkWhere" name="checkWhere"  class="form-control" placeholder="例子:cal_dt=${dealDate}"></div></div></div>',
                buttons: {
                    success: {
                        label: "<i class='icon-ok'></i> 保存",
                        className: "btn-sm btn-success",
                        callback: function () {
                            var e = $("#checkWhere").val();
                            a.checkWhere = e, console.log(a), generalCheckChange(a)
                        }
                    },
                    cancel: {
                        label: "<i class='icon-info'></i> 取消",
                        className: "btn-sm btn-danger",
                        callback: function () {
                        }
                    }
                }
            })
        })
    }, generalCheckChange = function (e) {
        $.ajax({
            type: "POST",
            url: self.contextPath + "/spmon/general-check/api/save-item",
            data: e,
            async: !0,
            success: function (e) {
                return "ok" != e.status ? void toastr.error(e.msg, "提示") : (toastr.success("操作成功", "提示"), void self.jobTables.ajax.reload())
            }
        })
    }, initJobTables = function () {
        var e = $("#jobTables");
        self.jobTables = e.DataTable({
            info: !1,
            ordering: !1,
            paging: !1,
            searching: !1,
            serverSide: !1,
            ajax: {
                url: self.contextPath + "/scheduler/task/api/job-tables",
                type: "POST",
                data: {schedulerId: self.schedulerId},
                dataSrc: function (e) {
                    return "success" == e.status ? e.jobTables : []
                }
            },
            columns: [{
                data: null, render: function (e, t, a, o) {
                    var n = '<input type="checkbox" ' + (e.check ? "checked" : "") + ' name="general-check" data-id="' + e.id + '" data-tableId="' + e.tableId + '" data-name="' + e.tableName + '" />';
                    return n
                }
            }, {data: "dbName"}, {
                data: null, render: function (e, t, a, o) {
                    var n = '<a target="_blank" href = "' + self.contextPath + "/metadata/metadata-detail?tableId=" + e.tableId + '" target="_blank">' + e.tableName + "</a>";
                    return n
                }
            }, {
                data: null, render: function (e, t, a, o) {
                    var n = "";
                    return e.check && (n = '<a href="javascript:;" class="tableWhere" data-type="text" data-tableId="' + e.tableId + '" data-name="' + e.tableName + '" data-placeholder="输入CheckWhere条件～" data-original-title="修改Where">' + e.checkWhere + "</a>"), n
                }
            }, {
                data: null, render: function (e, t, a, o) {
                    var n = '<span class="badge badge-danger remove" data-id="' + e.id + '">                        移除                      </span>';
                    return n
                }
            }]
        }), $("#tblHistory_processing").hide();
        jQuery("#tblHistory_wrapper")
    }, addJobTable = function (e) {
        var t = {dbName: e.dbName, tableName: e.name, tableId: e.id, schedulerId: self.schedulerId};
        $.post(self.contextPath + "/scheduler/task/api/save-job-tables", t, function (e) {
            "success" == e.status && self.jobTables.ajax.reload()
        })
    }, removeJobTable = function (e) {
        bootbox.confirm("确定移除该表", function (t) {
            t && $.post(self.contextPath + "/scheduler/task/api/delete-job-tables", {id: e}, function (e) {
                self.jobTables.ajax.reload()
            })
        })
    }, initTableSelect = function () {
        $("#table-select").select2({
            formatNoMatches: function () {
                return "未查找到表，请确认已维护元数据"
            },
            multiple: !1,
            placeholder: "添加任务生成表",
            ajax: {
                url: self.contextPath + "/metadata/api/table-search",
                type: "POST",
                quietMillis: 400,
                dataType: "json",
                data: function (e) {
                    return {
                        queryString: JSON.stringify({
                            pageNumber: 1,
                            pageSize: 5,
                            favorites: 0,
                            searchKey: e,
                            searchType: "1",
                            "my-favorites": !1,
                            "got-privileges": !1,
                            "i-am-owner": !1,
                            selectedOptions: []
                        })
                    }
                },
                results: function (e, t) {
                    t.page = t.page || 1, console.log(e);
                    var a = [];
                    return _.each(e.searchResult.tables, function (e) {
                        a.push({
                            id: e.id,
                            text: (24 != e.server_id ? e.server_ip + "|" : "") + e.db_name + "." + e.name,
                            name: e.name,
                            dbId: e.dbId,
                            dbName: e.db_name,
                            selected: !1
                        })
                    }), {results: a, pagination: {more: !1}}
                }
            },
            escapeMarkup: function (e) {
                return e
            }
        }).on("change", function (e) {
            var t = e.added;
            console.log(t), addJobTable(t)
        })
    }, showJobKeyPath = function (e) {
        $("#keyPathTable tr:gt(0)").remove(), $("#keyPathTable").append('<tr><td colspan=6 align="center">请稍等......</td></tr>'), $("#modalJobKeyPath").modal("show"), $.getJSON(self.contextPath + "/scheduler/task/api/fetch-job-key-path", {jobId: $("#jobId").val()}, function (e) {
            return "success" != e.status ? void toastr.error(e.msg, "提示") : ($("#keyPathTable tr:gt(0)").remove(), void $.each(e.jobParentKeyPath, function (e, t) {
                var a = "<tr><td>" + (e + 1) + "</td>" + ($("#schedulerId").val() == t.scheduler_id ? "<td><strong>" + t.job_name + "</strong></td>" : '<td><a target="_blank" href = "' + self.contextPath + "/scheduler/task/detail?schedulerId=" + t.scheduler_id + '" title="' + t.job_name + '">' + t.job_name + "</a></td>") + "<td>" + t.create_time + "</td><td>" + t.excute_time + "</td><td>" + t.update_time + "</td><td>" + diffDateTime(t.excute_time, t.update_time) + "</td>";
                a += "</tr>", a = $(a).appendTo("#keyPathTable")
            }))
        }).always(function () {
        })
    }, diffDateTime = function (e, t) {
        var a = t.split(/[-:\s+]/), o = e.split(/[-:\s+]/),
            n = Date.parse(new Date(a[0], a[1] - 1, a[2], a[3], a[4], a[5])),
            l = Date.parse(new Date(o[0], o[1] - 1, o[2], o[3], o[4], o[5])), s = n - l, i = Math.floor(s / 864e5),
            c = s % 864e5, r = Math.floor(c / 36e5), d = c % 36e5, u = Math.floor(d / 6e4), h = d % 6e4,
            b = Math.round(h / 1e3), f = i > 0 ? i + "Day " : "";
        return f += r > 0 ? r + "h " : "", f += u > 0 ? u + "m " : "", f += b > 0 ? b + "s" : "0s"
    }, showGanttChart = function () {
        $("#modalGanttChart").modal("show"), $.getJSON(self.contextPath + "/scheduler/task/api/fetch-job-key-path", {jobId: $("#jobId").val()}, function (e) {
            if ("success" != e.status) return void toastr.error(e.msg, "提示");
            var t = new Array, a = 1;
            _.each(e.jobParentKeyPath, function (e) {
                "<label><small>任务名称:" + e.job_name + "</small></label><br><label><small>调度时间:" + e.create_time + "</small></label> <br><label><small>执行时间:" + e.excute_time + "</small></label> <br><label><small>结束时间:" + e.update_time + "</small></label> ";
                t.push({
                    name: "层级 " + a,
                    desc: e.job_name,
                    values: [{
                        id: e.id,
                        from: '/Date("' + e.excute_time + '")/',
                        to: '/Date("' + e.update_time + '")/',
                        label: e.scheduler_id,
                        customClass: 3 == e.job_state ? "ganttGreen" : "ganttRed",
                        dataObj: e
                    }]
                }), a++
            }), initGanttChart(t)
        }).always(function () {
        })
    }, initGanttChart = function (e) {
        "use strict";
        $(".gantt").gantt({
            source: e,
            navigate: "scroll",
            scale: "hours",
            maxScale: "days",
            minScale: "hours",
            waitText: "请稍等...",
            itemsPerPage: 24,
            onItemClick: function (e) {
                var t = "<label><small>任务名称:" + e.job_name + "</small></label><br><label><small>调度时间:" + e.create_time + "</small></label> <br><label><small>执行时间:" + e.excute_time + "</small></label> <br><label><small>结束时间:" + e.update_time + "</small></label> ";
                bootbox.alert(t)
            },
            onAddClick: function (e, t) {
            },
            onRender: function () {
                window.console && "function" == typeof console.log && console.log("chart rendered")
            },
            onDataLoadFailed: function (e) {
                alert("Data failed to load!")
            }
        }), prettyPrint()
    };
    return {
        init: function (e) {
            Highcharts.setOptions({global: {useUTC: !1}}), self.contextPath = e.contextPath, self.receiver = e.receiver, self.hadoopQueueId = e.hadoopQueueId, self.ownerDpID = e.ownerDpID, self.jobName = e.jobName, self.isDelay = e.isDelay, self.userRole = e.userRole, self.schedulerId = e.schedulerId, self.deptId = e.deptId, initReceiver(), initHadoopQueue(), initDelayFlag(), initCharts(), initElementEvents(), initJobTables(), initTableSelect(), initGeneralCheckEvents()
        }
    }
}();
$(function () {
    currentDate = "", $.fn.modal.defaults.minHeight = function () {
        return $(window).height() - 100
    };
    var e = ace.edit("logView");
    e.getSession().setMode("ace/mode/sql"), e.setReadOnly(!0), e.setOption("maxLines", 30), e.setOption("minLines", 25), e.setAutoScrollEditorIntoView(!0), e.getSession().selection.on("changeSelection", function (e) {
    }), $("#logView").data("editor", e), $("#runJob").on("click", function () {
        $("#runModeId").val(0), bootbox.prompt({
            title: '<i class="icon-speedometer font-blue"></i> 请选择日期 <span class="help-block" style="font-size: 12px"> 是否从该Job重跑？ 确定后可进行Job移除</span>',
            inputType: "datetime",
            callback: function (e) {
                _.isNull(e) || (currentDate = e, runjobAlone())
            }
        })
    }), $("#testJob").on("click", function () {
        $("#modalEdit2").modal("show")
    }), $("#modalExec").on("click", function () {
        $("#runModeId").val(1), runjobAlone()
    })
});
var firstconnect = !0, socket, initSocket = function (e) {
    socket = 1 == $("#deptId").val() || 202 == $("#deptId").val() ? io.connect("http://127.0.0.1:8081") : io.connect("http://127.0.0.1:8081");
    socket.emit("filepath", e);
    socket.on("connect", function (a) {
        console.log("Connected to:", socket.host), socket.emit("filepath", e)
    }), socket.on("message", function (e) {
        if (e.receive && (console.log("have Received message"), socket.emit("showlog", "")), e.filename, e.tail) {
            var t = e.tail, a = $("#logView").data("editor");
            a.setValue(a.getValue() + t, 1), a.getSession().selection.clearSelection()
        }
    })
}, tailLogFile = function (e, t, a) {
    var o = ($("#jobType").val(), t + "_excuteId_" + e + "_" + a + ".log"),
        n = "/data/mq_log/schedule_log/excute_logs/" + o;
    $("#modalEdit .title").html(n), $("#modalEdit").modal("show"), firstconnect ? (firstconnect = !1, initSocket(n)) : ($("#logView").data("editor").setValue(""), socket.emit("filepath", n))
}, getLogFromHbase = function (e, t) {
    $("#modalEdit .title").html(t), $("#modalEdit").modal("show");
    var a = $("#logView").data("editor");
    a.setValue(""), a.getSession().selection.clearSelection(), $.ajax({
        type: "POST",
        url: contextPath + "/viewJobRunLog",
        async: !1,
        data: {excuteId: e},
        dataType: "json",
        success: function (e) {
            $.each(e, function (e, t) {
                var o = /runlog\:([a-zA-Z]+)\d+/;
                array = e.match(o), a.setValue(a.getValue() + array[1] + " " + t + "\n", 1), a.getSession().selection.clearSelection()
            })
        },
        error: function () {
            toastr.error("获取失败", "错误"), $("#modalEdit").modal("hidden")
        }
    })
};
//# sourceMappingURL=task-detail-c2d93a6824.min.js.map

var newfirstConnect = 0, newSocket, newInitSocket = function(e) {
    console.log('job execute id ='+e);
    $("#logView").data("editor").setValue('');
    var key = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
    /*$.ajax({
        type: 'get',
        url: '/socket.io/getUniqueKey',
        async: false,
        success:function (data) {
            key = data;
        }
    });*/
    var url = $('#logReader_'+e).attr('data-ws');
    /*$.ajax({
		url:'/consts/websocket-hadoop-job-execute-log-reader-url',
		dataType:'json',
		async:false,
		success:function(data){
			if(data){
				url = data.const;
			}else{
				alert("从配置文件中读取websocket地址失败");
				return;
			}
		}
	});*/
    if(key != null) {
        if ('WebSocket' in window) {
            //newSocket = new WebSocket("ws://zzdp.zhuanspirit.com/socket.io/1/websocket/"+key);
            //newSocket = new WebSocket("ws://127.0.0.1:8081/socket.io/1/websocket/"+key);
            //newSocket = new WebSocket("ws://192.168.187.213:8081/socket.io/1/websocket/"+key);
        	//newSocket = new WebSocket("ws://10.126.88.226:8081/socket.io/1/websocket/"+key);
        	//newSocket = new WebSocket("ws://10.148.15.10:8081/socket.io/1/websocket/"+key);
        	newSocket = new WebSocket(url);
        	console.log("link success")
        } else {
            alert('Not support websocket')
        }
        //连接发生错误的回调方法
        newSocket.onerror = function () {
            console.log("error")
        };

        //连接成功建立的回调方法
        newSocket.onopen = function (event) {
            newSocket.send(e);
            console.log(event);
        }
        //接收到消息的回调方法
        newSocket.onmessage = function (event) {
            var a = $("#logView").data("editor");
            if(event.data == "clearFlag-"+key) {
                a.setValue("");
            } else {
                a.setValue(a.getValue() + event.data, 1), a.getSession().selection.clearSelection();
            }
        }

        //连接关闭的回调方法
        newSocket.onclose = function () {
            console.log("close")
        }

        //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。
        window.onbeforeunload = function () {
            newSocket.close();
        }
        newfirstConnect = 0;
    }
}, newTailLogFile = function (e, t, a) {
    //var o = ($("#jobType").val(), t + "_excuteId_" + e + "_" + a + ".log"),
    var executeId = e;
    $("#modalEdit .title").html(executeId),
    $("#modalEdit").modal("show"),
    newSocket != undefined && newSocket != null ? (newSocket.close(),newInitSocket(executeId)) : newInitSocket(executeId)
    //newfirstConnect == 0 ? (newInitSocket(n)) : ($("#logView").data("editor").setValue(""), newSocket.send(n))
}