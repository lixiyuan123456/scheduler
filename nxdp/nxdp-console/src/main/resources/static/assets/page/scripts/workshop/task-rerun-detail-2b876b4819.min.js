var TaskRerunDetail = function () {
    var t = $(this), e = function () {
        t.status = [{id: -1, text: "全部"}, {id: 0, text: "允许"}, {
            id: 1,
            text: "不允许"
        }], $("#historyRun").select2({
            minimumResultsForSearch: -1, language: {
                noResults: function () {
                    return "无搜索结果"
                }
            }, placeholder: "选择是否允许重跑", data: t.status
        }).on("change", function (t) {
            $("#shFm").submit()
        }), $("#historyRun").val(t._historyRun).trigger('change')
    }, a = function () {
        t.jobStatus = [{id: -1, text: "全部"}, {id: 0, text: "未调度"}, {id: 1, text: "等待信号"}, {id: 2, text: "正在运行"}, {
            id: 3,
            text: "运行成功"
        }, {id: 4, text: "运行报错"}, {id: 5, text: "被kill"}, {id: 6, text: "重复提交"}, {
            id: 7,
            text: "运行中断"
        }], $("#jobStatus").select2({
            minimumResultsForSearch: -1, language: {
                noResults: function () {
                    return "无搜索结果"
                }
            }, placeholder: "选择运行状态", data: t.jobStatus
        }).on("change", function (t) {
            $("#shFm").submit()
        }), $("#jobStatus").val(t._jobState).trigger('change')
    }, s = function () {
        t.jobTypes = [{id: -1, text: "全部"}, {id: 1, text: "数据抽取"}, {id: 2, text: "MySQL脚本"}, {
            id: 3,
            text: "Hive脚本"
        }, {id: 4, text: "MR脚本"}, {id: 7, text: "SPARK脚本"}, {id: 12, text: "SPARK-Streaming"}, {
            id: 8,
            text: "STORM脚本"
        }, {id: 5, text: "SHELL脚本"}, {id: 9, text: "Wcrontab"}, {id: 10, text: "WTable"}, {
            id: 13,
            text: "HDFS-Check"
        }, {id: 14, text: "MiniReport"}], $("#jobType").select2({
            minimumResultsForSearch: -1,
            language: {
                noResults: function () {
                    return "无搜索结果"
                }
            },
            placeholder: "选择Job类型",
            data: t.jobTypes
        }).on("change", function (t) {
            $("#shFm").submit()
        }), $("#jobType").val(t._jobType).trigger('change')
    }, n = function () {
        t.jobLevels = [{id: -1, text: "全部"}, {id: 1, text: "一级"}, {id: 2, text: "二级"}, {
            id: 3,
            text: "三级"
        }], $("#jobLevel").select2({
            minimumResultsForSearch: -1, language: {
                noResults: function () {
                    return "无搜索结果"
                }
            }, placeholder: "选择重要等级", data: t.jobLevels
        }).on("change", function (t) {
            $("#shFm").submit()
        }), $("#jobLevel").val(t._jobLevel).trigger('change')
    }, o = function () {
        t.userList = new Array, t.userList.push({
            id: -1,
            text: "全部",
            selected: !0
        }), $.post(t.contextPath + "/user/api/list-user", function (e, a) {
            _.each(e.userList, function (e) {
                return t.userId == e.id ? void t.userList.push({
                    id: e.id,
                    text: e.trueName + "-" + e.userName,
                    selected: !0
                }) : void t.userList.push({id: e.id, text: e.trueName + "-" + e.userName, selected: !1})
            }), $("#selUser").select2({
                language: {
                    noResults: function () {
                        return "无搜索结果"
                    }
                }, placeholder: "选择用户", data: t.userList
            }).on("change", function (t) {
                $("#shFm").submit()
            }), $("#selUser").val(t._userId).trigger('change')
        })
    }, r = function (e) {
        $.post(t.contextPath + "/scheduler/task/api/job-label-all", function (a, s) {
            var n = [];
            _.each(a.result, function (t) {
                n.push({id: t.id, text: t.name, selected: !1})
            }), $("#" + e).select2({
                language: {
                    noResults: function () {
                        return "无搜索结果"
                    }
                }, multiple: !0, placeholder: "选择标签", data: n
            }).on("change", function (t) {
                $("#shFm").submit()
            }), $("#" + e).val(t._labels.split(",")).trigger('change')
        })
    }, c = function () {
        $("#checkAll").on("click", function () {
            var t = $(this).is(":checked");
            t ? ($(".check-item").prop("checked", !0), $.uniform.update(".check-item")) : ($(".check-item").prop("checked", !1), $.uniform.update(".check-item"))
        }), $("#optStatus").on("change", function () {
            $("#shFm").submit()
        }), $("#cancelAllTask").on("click", function () {
            var e = confirm("确定取消当前列表所有 ？");
            if (e) {
                var a = $(this);
                a.attr("disabled", "disabled");
                var s = [], n = [];
                $(".exJob").map(function () {
                    s.push($(this).attr("eid-attr")), n.push($(this).attr("sid-attr"))
                }), $.ajax({
                    type: "POST",
                    url: t.contextPath + "/scheduler/task-rerun/api/cancel-all-jobs",
                    data: {eIds: s.join(","), sIds: n.join(",")},
                    async: !0,
                    success: function (t) {
                        a.removeAttr("disabled"), t.status ? (toastr.success("取消成功", "提示"), window.location.reload(1)) : toastr.error("取消失败", "错误")
                    },
                    error: function (t) {
                        a.removeAttr("disabled"), toastr.error("取消失败" + t.statusText, "错误")
                    }
                })
            }
        })
    }, i = function () {
        $("#kw").keyup(function (t) {
            13 == t.keyCode && $("#shFm").submit()
        }), $("#doSearch").on("click", function () {
            $("#shFm").submit()
        }), $("#selectJobRelationMap").on("click", function () {
            var e = $("#beginJobs").val(), a = e.split("|");
            1 != t.isDraw && (a.length > 1 && d(a[0], a[1]), t.isDraw = 1)
        })
    }, u = function () {
        $("#submitTask").on("click", function () {
            var e = confirm("确定提交该Task ？");
            if (e) {
                var a = $("#submitTask").attr("data-set");
                $.ajax({
                    type: "POST",
                    url: t.contextPath + "/scheduler/task-rerun/api/submit-task-done",
                    data: {id: a},
                    async: !0,
                    success: function (t) {
                        "success" == t.status ? (toastr.success("Task 提交成功", "提示"), $("#submitTask").attr("disabled", "disabled"), location.reload(!0)) : toastr.error(t.msg, "错误")
                    },
                    error: function (t) {
                        toastr.error("Task 提交异常" + t.statusText, "错误")
                    }
                })
            }
        })
    }, l = function () {
        var e, a = $("#taskId").val();
        return $.ajax({
            type: "POST",
            url: t.contextPath + "/scheduler/task-rerun/api/fetch-task-execute-logs",
            async: !1,
            data: {id: a},
            dataType: "json",
            success: function (t) {
                "success" == t.status && (e = t.taskExecuteLogs)
            }
        }), e
    }, d = function (e, a) {
        // var s = t.contextPath + "/old-page/dev/task/getJobAllChildsByJson";
        // 1 == a && (s = t.contextPath + "/old-page/dev/task/getJobAllParentByJson"), $.ajax({
        //     type: "POST",
        //     url: s,
        //     async: !1,
        //     data: {jobId: e},
        //     dataType: "json",
        //     success: function (t) {
        //         if (t = JSON.parse(t), !(t.length > 0)) return void toastr.warning("无法获取到需要重跑的Job", "警告");
        //         if (1 == t.length) return void toastr.warning("该Job下没有依赖调度", "警告");
        //         var e = l(), s = [];
        //         1 == a ? (_.each(t, function (t) {
        //             s.push(t.parentId)
        //         }), b(t, e)) : (_.each(t, function (t) {
        //             s.push(t.jobId)
        //         }), h(t, e))
        //     }
        // })
    }, b = function (t, e) {
        var a = (new dagreD3.graphlib.Graph).setGraph({}).setDefaultEdgeLabel(function () {
            return {}
        });
        _.each(t, function (t) {
            var s = e[t.parentId], n = "", o = "", r = "";
            s && (0 == s.job_state ? (n = "bg-yellow", o = "未调度") : 1 == s.job_state ? (n = "bg-yellow-casablanca", o = "等待信号") : 2 == s.job_state ? (n = "bg-blue", o = "正在运行") : 3 == s.job_state ? (n = "bg-green", o = "运行成功") : 4 == s.job_state ? (n = "bg-red", o = "运行报错") : 5 == s.job_state ? (n = "bg-red-intense", o = "被kill") : 6 == s.job_state ? (n = "bg-yellow-casablanca", o = "重复提交") : 7 == s.job_state && (n = "bg-red-intense", o = "运行中断"), r = s.scheduler_id), a.setNode(t.parentId, {
                label: "J" + t.parentId,
                schedulerId: r,
                description: t.parentName,
                jobState: o,
                "class": n
            }), "" != t.parentId && "" != t.jobId && a.setEdge(t.jobId, t.parentId)
        }), a.nodes().forEach(function (t) {
            var e = a.node(t);
            e && (e.rx = e.ry = 5)
        });
        var s = new dagreD3.render, n = d3.select("svg"), o = n.append("g"),
            r = d3.behavior.zoom().on("zoom", function () {
                o.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")")
            });
        n.call(r), s(d3.select("svg g"), a);
        var c = function (t, e) {
            return "<p class='name'>调度Id:" + e.schedulerId + "</p><p class='name'>JobId:" + t + "</p><p class='name'>" + e.jobState + "</p><p class='description'>" + e.description + "</p>"
        };
        o.selectAll("g.node").attr("title", function (t) {
            return c(t, a.node(t))
        }).each(function (t) {
            $(this).tipsy({gravity: "w", opacity: 1, html: !0})
        });
        var i = .75;
        r.translate([(n.attr("width") - a.graph().width * i) / 2, 20]).scale(i).event(n), n.attr("height", a.graph().height * i + 100)
    }, h = function (t, e) {
        var a = (new dagreD3.graphlib.Graph).setGraph({}).setDefaultEdgeLabel(function () {
            return {}
        });
        _.each(t, function (t) {
            var s = e[t.jobId], n = "", o = "", r = "";
            s && (0 == s.job_state ? (n = "bg-yellow", o = "未调度") : 1 == s.job_state ? (n = "bg-yellow-casablanca", o = "等待信号") : 2 == s.job_state ? (n = "bg-blue", o = "正在运行") : 3 == s.job_state ? (n = "bg-green", o = "运行成功") : 4 == s.job_state ? (n = "bg-red", o = "运行报错") : 5 == s.job_state ? (n = "bg-red-intense", o = "被kill") : 6 == s.job_state ? (n = "bg-yellow-casablanca", o = "重复提交") : 7 == s.job_state && (n = "bg-red-intense", o = "运行中断"), r = s.scheduler_id),
                a.setNode(t.jobId, {
                label: "J" + t.jobId,
                schedulerId: r,
                description: t.jobName,
                jobState: o,
                "class": n
            }), "" != t.parentId && t.parentId && "" != t.jobId && t.jobId && a.setEdge(t.parentId, t.jobId)
        }), a.nodes().forEach(function (t) {
            var e = a.node(t);
            e.rx = e.ry = 5
        });
        var s = new dagreD3.render, n = d3.select("svg"), o = n.append("g"),
            r = d3.behavior.zoom().on("zoom", function () {
                o.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")")
            });
        n.call(r), s(d3.select("svg g"), a);
        var c = function (t, e) {
            return "<p class='name'>调度Id:" + e.schedulerId + "</p><p class='name'>JobId:" + t + "</p><p class='name'>" + e.jobState + "</p><p class='description'>" + e.description + "</p>"
        };
        o.selectAll("g.node").attr("title", function (t) {
            return c(t, a.node(t))
        }).each(function (t) {
            $(this).tipsy({gravity: "w", opacity: 1, html: !0})
        });
        var i = .75;
        r.translate([(n.attr("width") - a.graph().width * i) / 2, 20]).scale(i).event(n), n.attr("height", a.graph().height * i + 100)
    };
    return {
        init: function (l) {
            t.contextPath = l.contextPath, t._historyRun = l.historyRun, t._jobState = l.jobState, t._jobType = l.jobType, t._jobLevel = l.jobLevel, t._userId = l.userId, t._labels = l.labels, c(), a(), s(), n(), e(), o(), r("labels"), i(), u()
        }, removeJob: function (e) {
            $(".tooltips").tooltip("hide");
            var a = confirm("确定移除该Job ？");
            a && $.ajax({
                type: "POST",
                url: t.contextPath + "/scheduler/task-rerun/api/remove-job",
                data: {id: e},
                async: !0,
                success: function (t) {
                    "success" == t.status ? (toastr.success("Job移除成功", "提示"), window.location.reload(!0)) : toastr.error(t.msg, "错误")
                },
                error: function (t) {
                    toastr.error("移除Job异常" + t.statusText, "错误")
                }
            })
        }, recoverJob: function (e) {
            $.ajax({
                type: "POST",
                url: t.contextPath + "/scheduler/task-rerun/api/recover-job",
                data: {id: e},
                async: !0,
                success: function (t) {
                    "success" == t.status ? (toastr.success("Job恢复成功", "提示"), window.location.reload(!0)) : toastr.error(t.msg, "错误")
                },
                error: function (t) {
                    toastr.error("Job恢复异常" + t.statusText, "错误")
                }
            })
        }, removeJobAll: function () {
            var e = [];
            if ($(".check-item").map(function () {
                    var t = $(this).is(":checked");
                    t && e.push($(this).attr("data-attr"))
                }), e.length < 1) return void alert("请选择之后再操作");
            var a = confirm("确定移除该所有选择JOB ？");
            a && $.ajax({
                type: "POST",
                url: t.contextPath + "/scheduler/task-rerun/api/remove-job-all",
                data: {ids: e.join(",")},
                async: !0,
                success: function (t) {
                    "success" == t.status ? (toastr.success("Job移除成功", "提示"), window.location.reload(!0)) : toastr.error(t.msg, "错误")
                },
                error: function (t) {
                    toastr.error("移除Job异常" + t.statusText, "错误")
                }
            })
        }, keepJobAll: function () {
            var e = [];
            if ($(".check-item").map(function () {
                    var t = $(this).is(":checked");
                    t && e.push($(this).attr("data-attr"))
                }), e.length < 1) return void alert("请选择之后再操作");
            var a = $("#taskId").val(), s = confirm("确定移除除此之外所有Job ？");
            s && $.ajax({
                type: "POST",
                url: t.contextPath + "/scheduler/task-rerun/api/keep-job-all",
                data: {ids: e.join(","), taskId: a},
                async: !0,
                success: function (t) {
                    "success" == t.status ? (toastr.success("Job移除成功", "提示"), window.location.reload(!0)) : toastr.error(t.msg, "错误")
                },
                error: function (t) {
                    toastr.error("移除Job异常" + t.statusText, "错误")
                }
            })
        }
    }
}();
//# sourceMappingURL=task-rerun-detail-2b876b4819.min.js.map
