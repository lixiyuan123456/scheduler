var TaskAdd = function() {
  var self = $(this);
  $.ajaxSetup({
    async : false
  });
  String.prototype.startWith = function(str) {
    var reg = new RegExp("^" + str);
    return reg.test(this);
  }

  String.prototype.endWith = function(str) {
    var reg = new RegExp(str + "$");
    return reg.test(this);
  }

  var isNullOrEmpty = function(strVal) {
    if (strVal == '' || strVal == null || strVal == undefined) {
      return true;
    } else {
      return false;
    }
  };

  var initUserList = function() {
    self.userList = new Array();
    $.post(self.contextPath + '/user/api/list-user', function(data, status) {
      _.each(data.userList, function(user) {
        if (self.userId == user.id) {
          self.userList.push({
            id : user.id,
            text : user.trueName + "-" + user.userName,
            selected : true
          });
          return;
        } else {
          self.userList.push({
            id : user.id,
            text : user.trueName + "-" + user.userName,
            selected : false
          });
        }
      });
      $('#selUser').select2({
        "language" : {
          "noResults" : function() {
            return "无搜索结果";
          }
        },
        placeholder : '选择用户',
        data : self.userList
      }).on('change', function(item) {
      });

      $('#selUser').val(self.userId).trigger('change');

    });
  };

  var initReceiverList = function() {
    self.receiverList = new Array();
    $.post(self.contextPath + '/user/api/list-user', function(data, status) {
      _.each(data.userList, function(user) {
        if (self.userId == user.id) {
          self.receiverList.push({
            id : user.id,
            text : user.trueName + "(" + user.userName + ")",
            selected : true
          });
          return;
        } else {
          self.receiverList.push({
            id : user.id,
            text : user.trueName + "(" + user.userName + ")",
            selected : false
          });
        }
      });

      $('#receiver').select2({
        tags : self.receiverList,
        multiple : true,
      });

      $('#receiver').val(self.userId).trigger('change');

    });
  };

  var initServerList = function() {
    // server_type-存储类型(2-hive)，local_type-应用类型(2-数据仓库)
    var type = $('#hidType').val();
    var params;

    // shell脚本
    params = {
      serverType : 2,
      localType : 2
    };
    self.serverList = new Array();
    $.post(self.contextPath + '/dev/task/api/list-hdp-clusters', params, function(data, status) {
      _.each(data.serverConfig, function(server) {
        self.serverList.push({
          id : server.id,
          text : server.clusterName,
          selected : false
        });
      });
      $('#server').select2({
        "language" : {
          "noResults" : function() {
            return "无搜索结果";
          }
        },
        placeholder : '选择服务器',
        data : self.serverList
      }).on('change', function(item) {
        /*
         * self.searchForm.userId = $(this).val(); self.oTable.ajax.reload();
         */
      });
      $('#server').val('2').trigger('change');
    });
  };

  var initShellEditer = function() {
    // sql editor
    var editor = ace.edit('shellEditor');
    editor.getSession().setMode('ace/mode/sql');
    $('#shellEditor').data('editor', editor);

    var editorView = ace.edit('shellEditorView');
    editorView.setOptions({
      readOnly : true,
      maxLines : Infinity
    });
    editorView.getSession().setTabSize(2);
    editorView.getSession().setUseWrapMode(true);

    // editorView.setTheme("ace/theme/eclipse");
    // editorView.session.setMode("ace/mode/sql");
    $('#shellEditorView').data('editor', editorView);
  };

  var fetchSql = function(path, revision, callback) {
    var data = {
      path : path,
      revision : revision
    };
    $.getJSON(self.contextPath + '/dev/task/api/pull-scripts', data, function(result) {

      if (result.status != 'ok') {
        toastr["error"](result.msg, "提示");
        return;
      }
      $('#shellEditorView').data('editor').setValue(result.scripts);
      $('#dialog .title').html(data.path + '@' + result.revision);
      $('#dialog').modal('show');

      if (typeof callback == 'function') {
        callback(result.sql, result.revision);
      }
    }).always(function() {
    });

  }

  var editShell = function(codeEditLock, callback) {
    var newCodeEditLock = codeEditLock == 1 ? 0 : 1;
    var path = $('#txtSvnPath').val();
    var revision = $('#txtSvnRevision').val();
    var data = {
      path : path,
      revision : revision,
      codeEditLock : newCodeEditLock,
      id : $('#hidId').val()
    };
    /*
     * $.messager.progress({ title: '项目开发', msg: '获取最新代码……' });
     */
    $.getJSON(self.contextPath + '/dev/task/api/toggle-ide-available-status', data, function(result) {

      if (result.status != 'ok') {
        toastr["error"](result.msg, "获取最新代码");
        return;
      }

      if (codeEditLock == 1) {
        $('#hidCodeEditLock').val(0);
        $('#shellEditor').data('editor').setReadOnly(true);
        $('#btnEditShell').html('编辑');
        $('#btnEditShellSave').hide();
      } else {
        $('#hidCodeEditLock').val(1);
        $('#shellEditor').data('editor').setReadOnly(false);
        $('#btnEditShell').html('退出编辑');
        $('#btnEditShellSave').show();
      }

      $('#shellEditor').data('editor').setValue(result.data.scripts);

      if (typeof callback == 'function') {
        callback(result.revision);
      }
    }).always(function() {
      /* $.messager.progress('close'); */
    });

  }

  // task config validation
  var handleValidationTaskConfig = function() {
    // for more info visit the official plugin documentation:
    // http://docs.jquery.com/Plugins/Validation

    var taskConfigForm = $('#taskConfig');
    var alertInfo = $('.alertInfo');
    var error = $('.alert-danger', alertInfo);
    var success = $('.alert-success', alertInfo);

    taskConfigForm.validate({
      errorElement : 'span', // default input error message container
      errorClass : 'help-block help-block-error', // default input error message
      // class
      focusInvalid : false, // do not focus the last invalid input
      ignore : "", // validate all fields including form hidden input
      rules : {
        jobName : {
          required : true
        },
        description : {
          required : true
        },
        server : {
          required : true
        },
        hadoopQueue : {
          required : true
        }
      },

      messages : { // custom messages for radio buttons and checkboxes
        membership : {
          required : "Please select a Membership type"
        },
        service : {
          required : "Please select  at least 2 types of Service",
          minlength : jQuery.validator.format("Please select  at least {0} types of Service")
        }
      },

      errorPlacement : function(error, element) { // render error placement for
        // each input type
        if (element.parent(".input-group").size() > 0) {
          error.insertAfter(element.parent(".input-group"));
        } else if (element.attr("data-error-container")) {
          error.appendTo(element.attr("data-error-container"));
        } else if (element.parents('.radio-list').size() > 0) {
          error.appendTo(element.parents('.radio-list').attr("data-error-container"));
        } else if (element.parents('.radio-inline').size() > 0) {
          error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
        } else if (element.parents('.checkbox-list').size() > 0) {
          error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
        } else if (element.parents('.checkbox-inline').size() > 0) {
          error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
        } else {
          error.insertAfter(element); // for other inputs, just perform default
          // behavior
        }
      },

      invalidHandler : function(event, validator) { // display error alert on
        // form submit
        success.hide();
        error.show();
        Metronic.scrollTo(error, -200);
      },

      highlight : function(element) { // hightlight error inputs
        $(element).closest('.form-group').addClass('has-error'); // set error
        // class to
        // the control
        // group
      },

      unhighlight : function(element) { // revert the change done by hightlight
        $(element).closest('.form-group').removeClass('has-error'); // set error
        // class to
        // the
        // control
        // group
      },

      success : function(label) {
        label.closest('.form-group').removeClass('has-error'); // set success
        // class to the
        // control group
      },

      submitHandler : function(form) {
        success.show();
        error.hide();
        form.submit(); // submit the form
      }

    });
  }

  /*
   * var enableDefaultName = function() {
   * $('#checkDefaultName').iCheck('check'); }
   */

  var renderTask = function() {
    self.editing = !!$('#hidId').val();
    if (!self.editing) {
      $('#taskTitle').html('新建SHELL脚本');
      $('#shellEditDiv').html('<a href="javascript:void(0);" id="btnEditShellSave" class="btn btn-circle green"><i class="fa fa-save"></i>保存</a>');
      return;
    }
    $.ajax({
      type : 'POST',
      url : self.contextPath + '/dev/task/api/fetch-task',
      data : {
        "id" : $('#hidId').val()
      },
      success : function(result) {
        if (result.status == 'ok') {
          self.task = result.task;
          initEditing();
        } else {
          toastr["error"]("获取任失败.", "提示");
        }
      },
      error : function() {
        toastr["error"]("获取任务失败.", "提示");
      }
    });
  }
  var initEditing = function() {
    console.log(self.task);
    writeRelationDataBack(self.task);
    var taskDetails = $.parseJSON(self.task.details);

    $('#jobName').val(self.task.jobName);
    $('#description').val(self.task.description);
    $('#hidType').val(self.task.type);
    // initServerList();
    $('#taskTitle').html('修改SHELL脚本');

    if (self.task.editerId > 0 && self.userId != self.task.editerId && self.task.codeEditLock) {
      $('#shellEditDiv').html('<a href="javascript:bootbox.alert(\'该文件正在被编辑，如需改动请联系编辑人' + self.task.editerName + '.\');" class="btn btn-circle green"><i class="fa fa-save"></i>编辑</a>')
      $('#shellEditor').data('editor').setReadOnly(true);
    } else {
      $('#shellEditDiv').html('<a href="javascript:void(0);" id="btnEditShell" class="btn btn-circle green">' + (self.task.codeEditLock == 1 ? "退出编辑" : "编辑") + '</a>');
      if (self.task.codeEditLock != 1) {
        $('#shellEditor').data('editor').setReadOnly(true);
      }
    }
    $('#hidCodeEditLock').val(self.task.codeEditLock);
    $('#txtSvnPath').val(taskDetails.path);
    $('#txtSvnRevision').val(taskDetails.revision);
    $('#shellEditor').data('editor').setValue(taskDetails.scripts);

    $('#server').val(taskDetails.serverId).trigger("change");
    $('#selUser').val(self.task.userId).trigger('change');
    $('#receiver').val(taskDetails.receiver).trigger('change');

    // file
    // $('#filePath').val(taskDetails.filePath);
    // $('#fileName').val(taskDetails.fileName);
    // $('#fileUploadState').html(taskDetails.fileName);
    // $('#newFileName').val(taskDetails.newFileName);

    // SHELL参数
    $('#otherArgs').val(taskDetails.otherArgs);

    // default name
    /*
     * if ($('#jobName').val() == parseJobName()) { enableDefaultName(); }
     */

    // scheduler, dependencies
    var scheduler = taskDetails.scheduler;
    var dependencies = taskDetails.dependencies;
    self.taskScheduler.loadScheduler(scheduler);
    // loadDependencies(dependencies);

  }

  var initSave = function() {
    $('#viewTask').click(function() {
      if (!self.editing) {
        toastr["error"]("任务不存在.", "提示");
      } else {
        self.viewJobUrl = self.contextPath + '/scheduler/task/detail?schedulerId=' + $('#hidId').val();
        window.location.href = self.viewJobUrl;
      }
    });

    $('#btnEditShellSave').click(function() {
      $('#saveTask').click();
    });

    $('#btnEditShell').click(function() {
      var codeEditCode = $('#hidCodeEditLock').val();
      if (codeEditCode == 1) {
        bootbox.confirm('确定退出！退出编辑将不会保存代码,如需保存请点击上面Save按钮？', function(event) {
          if (event) {
            editShell(codeEditCode, function(revision) {
              $('#txtSvnRevision').val(revision);
            });
          }
        });
      } else {
        editShell(codeEditCode, function(revision) {
          $('#txtSvnRevision').val(revision);
        });
      }
    });

    $('#saveTask').click(function() {

      var error = function(msg) {
        toastr["error"](msg, "提示");
        return false;
      };

      var val = function(selector) {
        return $.trim($(selector).val());
      };

      var jobName = val('#jobName');

      /*
       * var fileName = val('#fileName'); if(isNullOrEmpty(fileName)) {
       * error("文件未上传或者上传失败"); return false; }
       */

      var data = {
        'jobName' : jobName,
        'type' : $('#hidType').val(),
        'userId' : val('#selUser'),
        'description' : $('#description').val(),
        'outputMode' : $('#taskConfig input[name="outputMode"]:checked').val(),
        'outputModeValue' : $('#taskConfig input[name="outputMode"]:checked').val() == 1 ? $('#taskConfig select[name="outputModeValue"]').val() : $('#taskConfig input[name="outputModeValue"]').val(),
      };

      if (!$('#taskConfig').validate().form()) {
        return false;
      }

      if (!$('#scheduleConfig').validate().form()) {
        return false;
      }

      var details = {};
      // file
      /*
       * $.extend(details, { fileName: val('#fileName'), newFileName:
       * val('#newFileName'), filePath: val('#filePath'), uploadFlag:
       * val('#uploadFlag'), serverId: val('#server') });
       */
      // SHELL
      $.extend(details, {
        path : val('#txtSvnPath'),
        revision : val('#txtSvnRevision'),
        serverId : val('#server'),
        scripts : $('#shellEditor').data('editor').getValue(),
        out: packRelationData(),
      });
      $.extend(details, {
        otherArgs : val('#otherArgs')
      });

      // scheduler, dependencies
      var scheduler = self.taskScheduler.validateScheduler();
      var dependencies = $('#dependencyJobIds').val();

      $.extend(details, {
        scheduler : scheduler,
        dependencies : dependencies
      });

      console.log(details);
      data['details'] = JSON.stringify(details);

      // id
      if (self.editing) {
        data['id'] = $('#hidId').val();
      }
      console.log(data);
      $.post(self.contextPath + '/dev/task/api/save-shell-ide-job', data, function(result) {

        if (result.status != 'ok') {
          toastr['error'](result.message, '提示');
          return;
        }

        toastr['success'](self.editing ? '修改成功' : '保存成功', '提示');

        if (!self.editing) {
          $('#hidId').val(result.id);
          self.editing = true;
        }
        $('#txtSvnRevision').val(result.revision);
        $('#hidCodeEditLock').val(0);
        $('#shellEditor').data('editor').setReadOnly(true);
        $('#btnEditShell').html('编辑');

        var path = $('#txtSvnPath').val();
        var revision = $('#txtSvnRevision').val();
        var data = {
          path : path,
          revision : revision,
          codeEditLock : $('#hidCodeEditLock').val(),
          id : $('#hidId').val()
        };
        $.getJSON(self.contextPath + '/dev/task/api/toggle-ide-available-status', data, function(result) {

        });
        refreshHistory();

      }, 'json');
    });

  }

  var initJobHistory = function() {
    var table = $('#tblHistory');
    self.tblHistory = table.DataTable({
      "bProcessing" : true,
      "language" : {
        "emptyTable" : "无结果",
        "lengthMenu" : "每页&nbsp; _MENU_ &nbsp;项",
        "search" : "查找：",
        "processing" : "正在加载...",
        "info" : "显示 _START_ 到 _END_ 共 _TOTAL_ 条记录",
        "infoEmpty" : "显示  0  到  0 共  0 条记录"
      },
      "info" : false,
      "ordering" : false,
      "paging" : false,
      "searching" : false,
      "serverSide" : false,
      "ajax" : {
        url : self.contextPath + '/dev/task/api/fetch-file-history',
        type : 'POST',
        data : function(d) {
          d.columns = null;
          d.search = null;
          d['id'] = $('#hidId').val(); // self.searchForm.jobName;
        },
        "dataSrc" : function(rs) {
          if (!rs.list) {
            rs.list = [];
          }
          return rs.list;
        },
      },
      "columns" : [{
        data : "updateTime"
      }, {
        data : "operatorName"
      }, {
        data : "fileName"
      }, {
        data : null,
        render : function(data, type, full, meta) {
          return "<a href=\"javascript:TaskAdd.fetchSql('" + data.filepath + "','" + data.revision + '\')" preview="1">预览</a>';
        }
      }],
    });

    $('#tblHistory_processing').hide();

    var tableWrapper = jQuery('#tblHistory_wrapper');
  }

  var refreshHistory = function() {
    self.tblHistory.ajax.reload();
  }

  return {

    init : function(opts) {
      self.contextPath = opts.contextPath;
      self.userId = opts.userId;
      self.taskScheduler = opts.taskScheduler;
      initUserList();
      initReceiverList();
      initShellEditer();
      // initFileUpload();
      initServerList();
      handleValidationTaskConfig();
      renderTask();
      initJobHistory();
      initSave();
    },
    fetchSql : function(path, revision, callback) {
      fetchSql(path, revision, callback);
    }
  }

}();
