var TaskList = function() {
  var self = $(this);

  var initDataTemplate = function() {
    self.searchForm = {};
    self.searchForm.jobType = -1;
    self.searchForm.jobLevel = -1;
    self.searchForm.userId = self.userId;
    self.searchForm.status = -1;
    self.searchForm.scheduleLevel = -1;
    self.searchForm.jobState = -1;
    self.searchForm.jobName = '';
    self.searchForm.labels = '';

    // console.log(self.searchForm);
  };
  var initJobType = function() {
    self.jobTypes = [{
      id : -1,
      text : '全部'
    }, {
      id : 1,
      text : '数据抽取'
    }, {
      id : 2,
      text : 'MySQL脚本'
    }, {
      id : 3,
      text : 'Hive脚本'
    }, {
      id : 4,
      text : 'MR脚本'
    }, {
      id : 7,
      text : 'SPARK脚本'
    }, {
      id : 12,
      text : 'SPARK-Streaming'
    }, {
      id : 16,
      text : 'SPARK-SQL'
    }, {
      id : 8,
      text : 'STORM脚本'
    }, {
      id : 5,
      text : 'SHELL脚本'
    }, {
      id : 21,
      text : 'SHELL-IDE脚本'
    }, {
      id : 9,
      text : 'Wcrontab'
    }, {
      id : 10,
      text : 'WTable'
    }, {
      id : 13,
      text : 'HDFS-Check'
    }, {
      id : 14,
      text : 'MiniReport'
    }, {
      id : 17,
      text : 'Hive2WTable'
    }];
    $('#jobType').select2({
      minimumResultsForSearch : -1,
      "language" : {
        "noResults" : function() {
          return "无搜索结果";
        }
      },
      placeholder : '选择Job类型',
      data : self.jobTypes
    }).on('change', function(item) {
      self.searchForm.jobType = $(this).val();
      self.oTable.ajax.reload();
    });
    $('#jobType').val(-1).trigger('change');
  };
  var initJobLevel = function() {
    self.jobLevels = [{
      id : -1,
      text : '全部'
    }, {
      id : 1,
      text : '一级'
    }, {
      id : 2,
      text : '二级'
    }, {
      id : 3,
      text : '三级'
    }];
    $('#jobLevel').select2({
      minimumResultsForSearch : -1,
      "language" : {
        "noResults" : function() {
          return "无搜索结果";
        }
      },
      placeholder : '选择重要等级',
      data : self.jobLevels
    }).on('change', function(item) {
      self.searchForm.jobLevel = $(this).val();
      self.oTable.ajax.reload();
    });
    $('#jobLevel').val(-1).trigger('change');
  };
  var initStatus = function() {
    self.status = [{
      id : -1,
      text : '全部'
    }, {
      id : 0,
      text : '草稿'
    }, {
      id : 1,
      text : '上线'
    }, {
      id : 2,
      text : '暂停'
    }];
    $('#status').select2({
      minimumResultsForSearch : -1,
      "language" : {
        "noResults" : function() {
          return "无搜索结果";
        }
      },
      placeholder : '选择调度状态',
      data : self.status
    }).on('change', function(item) {
      self.searchForm.status = $(this).val();
      self.oTable.ajax.reload();
    });
    $('#status').val(-1).trigger('change');
  };
  var initUserList = function() {
    self.userList = new Array();
    self.userList.push({
      id : -1,
      text : '全部'
    });
    $.ajax({
      url : '/user/api/list-user',
      //data : {jobId:jobId},
      async : false,
      dataType : 'json',
      success : function(data){
        _.each(data.userList, function(user) {
          if (self.userId == user.id) {
            self.userList.push({
              id : user.id,
              text : user.trueName + "-" + user.userName,
              selected : false
            });
            return;
          } else {
            self.userList.push({
              id : user.id,
              text : user.trueName + "-" + user.userName,
              selected : false
            });
          }
        });
      }
    });
    $('#selUser').select2({
      "language" : {
        "noResults" : function() {
          return "无搜索结果";
        }
      },
      placeholder : '选择调度状态',
      data : self.userList
    }).on('change', function(item) {
      self.searchForm.userId = $(this).val();
      self.oTable.ajax.reload();
    });
    $('#selUser').val(self.userId).trigger('change');
    /*$('#selUser').select2({
      "language" : {
        "noResults" : function() {
          return "无搜索结果";
        }
      },
      placeholder : '选择用户',
      data : self.userList
    }).on('change', function(item) {
      console.log(JSON.stringify(item)+'----------------------');
      self.searchForm.userId = $(this).val();
      self.oTable.ajax.reload();
    });
    $('#selUser').val(self.userId).trigger('change');*/
    /*$.post(self.contextPath + '/user/api/list-user', function(data, status) {
      _.each(data.userList, function(user) {
        if (self.userId == user.id) {
          self.userList.push({
            id : user.id,
            text : user.trueName + "-" + user.userName,
            selected : true
          });
          return;
        } else {
          self.userList.push({
            id : user.id,
            text : user.trueName + "-" + user.userName,
            selected : false
          });
        }
      });
      $('#selUser').select2({
        "language" : {
          "noResults" : function() {
            return "无搜索结果";
          }
        },
        placeholder : '选择用户',
        data : self.userList
      }).on('change', function(item) {
        self.searchForm.userId = $(this).val();
        self.oTable.ajax.reload();
      });
      $('#selUser').val(self.userId).trigger('change');
    });*/
  };

  var initJobState = function() {
    self.jobStatus = [{
      id : -1,
      text : "全部"
    }, {
      id : 0,
      text : "未调度"
    }, {
      id : 1,
      text : "等待信号"
    }, {
      id : 2,
      text : "正在运行"
    }, {
      id : 3,
      text : "运行成功"
    }, {
      id : 4,
      text : "运行失败"
    }, {
      id : 5,
      text : "被kill"
    }, {
      id : 6,
      text : "等待资源"
    }, {
      id : 7,
      text : "解析失败"
    }, {
      id : 8,
      text : "暂停"
    }, {
      id : 9,
      text : "重复提交"
    }, {
      id : 10,
      text : "运行中断"
    }, {
      id : 99,
      text : "killing"
    }];
    $('#jobStatus').select2({
      minimumResultsForSearch : -1,
      "language" : {
        "noResults" : function() {
          return "无搜索结果";
        }
      },
      placeholder : '选择运行状态',
      data : self.jobStatus
    }).on('change', function(item) {
      self.searchForm.jobState = $(this).val();
      self.oTable.ajax.reload();
    });
    $('#jobStatus').val(-1).trigger('change');
  };

  var initScheduleLevel = function() {
    self.scheduleLevels = [{
      id : -1,
      text : "全部"
    }, {
      id : 1,
      text : "分钟"
    }, {
      id : 2,
      text : "小时"
    }, {
      id : 3,
      text : "天"
    }];
    $('#scheduleLevel').select2({
      minimumResultsForSearch : -1,
      "language" : {
        "noResults" : function() {
          return "无搜索结果";
        }
      },
      placeholder : '选择调度级别',
      data : self.scheduleLevels
    }).on('change', function(item) {
      self.searchForm.scheduleLevel = $(this).val();
      self.oTable.ajax.reload();
    });
    $('#scheduleLevel').val(-1).trigger('change');
  };

  var initOtherFilter = function() {
    self.otherFilter = [{
      id : -1,
      text : "全部"
    }, {
      id : 0,
      text : "凌晨任务"
    }, {
      id : 1,
      text : "出错阻塞"
    }, {
      id : 2,
      text : "支持并行"
    }];
    $('#otherFilter').select2({
      minimumResultsForSearch : -1,
      "language" : {
        "noResults" : function() {
          return "无搜索结果";
        }
      },
      placeholder : '选择其他筛选',
      data : self.otherFilter
    }).on('change', function(item) {
      self.searchForm.isMonitor = $(this).val() == 0 ? 1 : 0;
      self.searchForm.errorRunContinue = $(this).val() == 1 ? 1 : 0;
      self.searchForm.parallelRun = $(this).val() == 2 ? 1 : 0;
      self.oTable.ajax.reload();
    });
    $('#otherFilter').val(-1).trigger('change');
  };

  var initLabels = function(id) {
    $('#' + id).select2({
      formatNoMatches : function() {
        return "无更多搜索结果，请先添加";
      },
      multiple : true,
      placeholder : '选择运行状态',
      ajax : {
        url : self.contextPath + '/scheduler/task/api/job-label-all',
        type : 'POST',
        quietMillis : 400,
        dataType : 'json',
        data : function(params) {
          return {
            name : params
          }
        },
        results : function(data, params) {
          params.page = params.page || 1;
          var item = [];
          _.each(data.result, function(label) {
            item.push({
              id : label.id,
              text : label.name,
              selected : false
            });
          });

          return {
            results : item,
            pagination : {
              more : false,
            }
          };
        }
      },
      escapeMarkup : function(markup) {
        return markup;
      }, // let our custom formatter work
    }).on('change', function(item) {
      if (id == 'labels') {
        self.searchForm.labels = $(this).val();
        self.oTable.ajax.reload();
      }
    });
  }
  var prepareSearch = function() {
    $('#kw').keyup(function(event) {
      if (event.keyCode == 13) {
        self.searchForm.jobName = $.trim($('#kw').val());
        self.oTable.ajax.reload();
      }
    });
    $('#doSearch').on('click', function() {
      self.searchForm.jobName = $.trim($('#kw').val());
      self.oTable.ajax.reload();
    });

    $('#addLabel').on('click', function() {
      bootbox.prompt({
        title : '新增Label',
        inputType : 'text',
        callback : function(result) {
          if (!_.isNull(result) && result != "") {
            saveLabels(result);
          }
        }
      });
    })
  };

  var saveLabels = function(result) {
    $.ajax({
      type : 'POST',
      url : self.contextPath + '/scheduler/task/api/job-label-save',
      data : {
        "label.name" : result
      },
      async : true,
      success : function(rs) {
        if (rs.status == 'success') {
          toastr['success']('新增成功', '提示');
        } else {
          toastr['error']('新增失败，' + rs.msg, '错误');
        }
      },
      error : function(status) {
        toastr['error']('新增失败', '错误');
      }
    });
  }
  var initTables = function() {
    var table = $('#dataTable');
    self.oTable = table.DataTable({
      'serverSide' : true,
      'ordering' : false,
      'searching' : false,
      'scrollX' : true,
      'ajax' : {
        url : '/list/api/search-task',
        data : function(d) {
          d.columns = null;
          d.search = null;
          d['searchForm.jobType'] = self.searchForm.jobType;
          d['searchForm.jobLevel'] = self.searchForm.jobLevel;
          d['searchForm.userId'] = self.searchForm.userId;
          d['searchForm.status'] = self.searchForm.status;
          d['searchForm.scheduleLevel'] = self.searchForm.scheduleLevel;
          d['searchForm.jobState'] = self.searchForm.jobState;
          d['searchForm.isMonitor'] = self.searchForm.isMonitor;
          d['searchForm.parallelRun'] = self.searchForm.parallelRun;
          d['searchForm.errorRunContinue'] = self.searchForm.errorRunContinue;
          d['searchForm.jobName'] = $.trim($('#kw').val()); // self.searchForm.jobName;
          d['searchForm.labels'] = $('#labels').val();// self.searchForm.labels;
        },
        dataSrc : function(rs) {
          return rs.data;
        },
      },
      'drawCallback' : function(settings) {
        $.contextMenu({
          selector : '#dataTable tbody tr',
          trigger : 'right',
          /*
           * determinePosition: function($menu){ $menu.css('display',
           * 'list-item'); },
           */
          callback : function(itemKey, opt) {
            var rowData = $('#dataTable').DataTable().row(this).data();
            console.log(rowData);
            if (itemKey == 'online') {
              TaskList.editJob(1, rowData.jobId, rowData.jobId, rowData.runTime);
            } else if (itemKey == 'offline') {
              TaskList.editJob(2, rowData.jobId, rowData.jobId, rowData.runTime);
            } else if (itemKey == 'edit') {
              window.open('/dev/add/edit?id=' + rowData.jobId, "_blank");
            } else if (itemKey == 'delete') {
              TaskList.editJob(3, rowData.jobId, rowData.jobId, rowData.runTime);
            }
          },
          items : {
            'online' : {
              name : '上线',
              icon : 'fa-arrow-circle-up',
            },
            'offline' : {
              name : '下线',
              icon : 'fa-arrow-circle-down',
            },
            'edit' : {
              name : '编辑',
              icon : 'fa-pencil',
            },
            'delete' : {
              name : '删除',
              icon : 'fa-trash-o',
            },
          },
        });
      },
      'columns' : [{
        data : null,
        render : function(data, type, full, meta) {
          var innerHtml = "<input type='checkbox' data-set='" + data.jobId + "' class='checkboxes' style='width: 15px; height: 15px;' />";
          return innerHtml;
        }
      }, {
        data : "jobId"
      }, {
        data : null,
        className : 'text-left',
        render : function(data, type, full, meta) {
          var jobName = data.jobName;
          /*
           * if (jobName && jobName.length > 40) { jobName =
           * jobName.substring(0, 35) + '...'; }
           */

          var innerHtml = "";
          if (data.jobType == 1) {
            innerHtml = "<span class='server-icon extract-icon tooltips' data-original-title='数据抽取脚本' data-toggle='tooltip'></span>"
          } else if (data.jobType == 2) {
            innerHtml = "<span class='server-icon mysql-icon tooltips' data-original-title='MySQL脚本' data-toggle='tooltip'></span>"
          } else if (data.jobType == 3) {
            innerHtml = "<span class='server-icon hive-icon tooltips' data-original-title='hive脚本' data-toggle='tooltip'></span>"
          } else if (data.jobType == 4) {
            innerHtml = "<span class='server-icon mapreduce-icon tooltips' data-original-title='MR脚本' data-toggle='tooltip'></span>"
          } else if (data.jobType == 5) {
            innerHtml = "<span class='server-icon bash-icon tooltips' data-original-title='shell脚本' data-toggle='tooltip'></span>"
          } else if (data.jobType == 7) {
            innerHtml = "<span class='server-icon spark-icon tooltips' data-original-title='spark脚本' data-toggle='tooltip'></span>"
          } else if (data.jobType == 8) {
            innerHtml = "<span class='server-icon storm-icon tooltips' data-original-title='storm脚本' data-toggle='tooltip'></span>"
          } else if (data.jobType == 9) {
            innerHtml = "<span class='server-icon wcrontab-icon tooltips' data-original-title='Wcrontab' data-toggle='tooltip'></span>"
          } else if (data.jobType == 10) {
            innerHtml = "<span class='fa fa-table tooltips' data-original-title='WTable Dump' data-toggle='tooltip'></span>";
          } else if (data.jobType == 12) {
            innerHtml = "<span class='fa spark-icon tooltips' data-original-title='Spark-Streaming' data-toggle='tooltip'></span>";
          } else if (data.jobType == 13) {
            innerHtml = "<span class='fa icon-check tooltips' data-original-title='HDFS-Check' data-toggle='tooltip'></span>";
          } else if (data.jobType == 14) {
            innerHtml = "<span class='fa icon-bar-chart tooltips' data-original-title='MiniReport' data-toggle='tooltip'></span>";
          } else if (data.jobType == 16) {
            innerHtml = "<span class='fa spark-icon tooltips' data-original-title='SPARK-SQL' data-toggle='tooltip'></span>";
          } else if (data.jobType == 17) {
            innerHtml = "<span class='fa fa-table' data-original-title='Hive2WTable' data-toggle='tooltip'></span>";
          } else if (data.jobType == 18) {
            innerHtml = "<span class='fa fa-table' data-original-title='Hive2TList' data-toggle='tooltip'></span>";
          } else if (data.jobType == 21) {
            innerHtml = "<span class='server-icon bash-icon tooltips' data-original-title='shell脚本' data-toggle='tooltip'></span>"
          } else {
            innerHtml = "<span class='label bg-grey'>其它</span>"
          }

          return innerHtml + ' <a target="_blank" href = "' + self.contextPath + '/scheduler/task/detail?schedulerId=' + data.jobId + '" target="_blank" title="' + data.jobName + '">' + jobName + '</a>';
        }
      }, {
        data : "userName"
      }, {
        data : null,
        render : function(data, type, full, meta) {
          var innerHtml = "";
          if (data.status == 0) {
            innerHtml = "<span class='label bg-yellow'>草稿</span>"
          } else if (data.status == 1) {
            innerHtml = "<span class='label bg-green'>上线</span>"
          } else if (data.status == 2) {
            innerHtml = "<span class='label bg-grey-silver'>暂停</span>"
          } else {
            innerHtml = "<span class='label bg-grey'>其它</span>"
          }
          return innerHtml;
        }
      }, {
        data : null,
        render : function(data, type, full, meta) {
          var innerHtml = "";
          if (data.jobState == 0) {
            innerHtml = "<span class='label bg-yellow'>未调度</span>"
          } else if (data.jobState == 1) {
            innerHtml = "<span class='label bg-yellow-casablanca'>等待信号</span>"
          } else if (data.jobState == 2) {
            innerHtml = "<span class='label bg-blue'>正在运行</span>"
          } else if (data.jobState == 3) {
            innerHtml = "<span class='label bg-green'>运行成功</span>"
          } else if (data.jobState == 4) {
            innerHtml = "<span class='label bg-red'>运行失败</span>"
          } else if (data.jobState == 5) {
            innerHtml = "<span class='label bg-red-intense'>被kill</span>"
          } else if (data.jobState == 6) {
            innerHtml = "<span class='label bg-yellow-casablanca'>等待资源</span>";
          } else if (data.jobState == 7) {
            innerHtml = "<span class='label bg-red-thunderbird'>解析失败</span>";
          } else if (data.jobState == 8) {
            innerHtml = "<span class='label bg-yellow-lemon'>暂停</span>";
          } else if (data.jobState == 9) {
            innerHtml = "<span class='label bg-yellow-casablanca'>重复提交</span>";
          } else if (data.jobState == 10) {
            innerHtml = "<span class='label bg-red-intense'>运行中断</span>";
          } else if (data.jobState == 99) {
            innerHtml = "<span class='label bg-red-intense'>killing</span>";
          }
          return innerHtml;
        }
      },
      {
        data : null,
        render : function(data,type,full,meta){
          var html = '';
          if(!data.outValue || data.outValue == ''){
            return html;
          }
          var search = $('#kw').val();
          if(data.outMode == 1){
            var arr = JSON.parse(data.outValue);
            $.each(arr,function(i,element){
              if(element.name.indexOf(search) != -1){
                html += element.name + '<br/>';
              }
            });
          }else if(data.outMode == 2){
            var arr = data.outValue.split(',');
            $.each(arr,function(i,element){
              if(element.indexOf(search) != -1){
                html += element + '<br/>';
              }
            });
          }
          if(search == ''){
            var end = html.indexOf('<br/>') == -1 ? 30 : html.indexOf('<br/>');
            html = html.substring(0,end) +'......';
          }
          return html;
        },
      },
      {
        data : "updateTime"
      }, {
        data : "nextFireTime"
      }, {
        data : null,
        render : function(data, type, full, meta) {
          var innerHtml1 = '<a href="javascript:;" onclick="TaskList.reRunJob(3,' + data.jobId + ')" class="btn btn-sm btn-success" title="运行" data-toggle="tooltip" data-placement="top"><i class="icon-control-play"></i></a>';
          if (data.jobState == 1) { // job提交运行，取消等待
            innerHtml1 = '<a href="javascript:;" onclick="TaskList.reRunJob(6,' + data.jobId + ')" class="btn btn-sm btn-info" title="取消等待" data-toggle="tooltip" data-placement="top"><i class="icon-action-undo"></i></a>';
          }
          if (data.jobState == 2) { // job正在运行，是否kill
            innerHtml1 = '<a href="javascript:;" onclick="TaskList.reRunJob(7,' + data.jobId + ')" class="btn btn-sm btn-danger" title="终止" data-toggle="tooltip" data-placement="top"><i class="icon-control-pause"></i></a>';
          }
          var innerHtml2 = '<a href="javascript:;" onclick="TaskList.reRunJob(4,' + data.jobId + ')" class="btn btn-sm btn-danger" title="重跑" data-toggle="tooltip" data-placement="top"><i class="icon-control-end"></i></a>';

          var innerHtml3 = '<a href="javascript:;" onclick="TaskList.reRunJob(5,' + data.jobId + ')" class="btn btn-sm btn-danger" title="编辑" data-toggle="tooltip" data-placement="top"><i class="icon-note"></i></a>';

          // var options = '';
          // options += '<div class="dropdown" style="display:inline;">';
          // options += '<a href="javascript:;" class="btn btn-sm
          // btn-success"id="edit-dropdown-menu" data-toggle="dropdown"
          // aria-haspopup="true" aria-expanded="true"><i
          // class="icon-note"></i></a>';
          // options += '<div class="btn-group tooltips" title="编辑"
          // data-toggle="tooltip" data-container="body">';
          // options += '<a id="dropdown-title" href="javascript:;"class="btn
          // btn-sm btn-success" data-toggle="dropdown" data-hover="dropdown"><i
          // class="icon-note"></i></a>';
          // options += '<ul class="dropdown-menu"
          // aria-labelledby="edit-dropdown-menu">';
          // options += '<li><a href="javascript:;"
          // onclick="TaskList.editJob(1,'+data.jobId+','+data.jobId+',\''+
          // data.runTime+'\')"><i class="fa fa-arrow-circle-up
          // font-blue"></i>上线</a></li>';
          // options += '<li><a href="javascript:;"
          // onclick="TaskList.editJob(2,'+data.jobId+','+data.jobId+',\''+
          // data.runTime+'\')"><i class="fa fa-arrow-circle-down
          // font-yellow"></i>下线</a></li>';
          // options += '<li><a target="_blank" href="'+ self.contextPath +
          // '/dev/add/edit?id=' + data.jobId +'"><i class="fa fa-pencil
          // font-green"></i>编辑详情</a></li>';
          // options += '<li><a href="javascript:;" onclick="TaskList.editJob(7,
          // ' + data.jobId + ', ' + data.jobId + ', \'' +
          // ((_.isNull(data.labels) || data.labels == 'null' ||
          // _.isUndefined(data.labels)) ? '' : data.labels) + '\')"><i
          // class="fa fa-tags font-green">标签管理</i></a></li>';
          // options += '<li><a href="javascript:;" onclick="TaskList.editJob(8,
          // ' + data.jobId + ', ' + data.jobId + ', \'' + data.jobName +
          // '\')"><i class="fa fa-exchange font-green"></i>依赖切换</a></li>';
          // options += '<li><a href="javascript:;" onclick="TaskList.editJob(3,
          // ' + data.jobId + ', ' + data.jobId + ', \'' + data.runTime +
          // '\')"><i class="fa fa-trash-o font-red"></i>删除</a></li>';
          // options += '<li><a href="javascript:;" onclick=""><i
          // class=""></i></a></li>';
          // options += '<li><a href="javascript:;" onclick=""><i
          // class=""></i></a></li>';
          // options += '</div>';

          if (data.jobType == 14 && self.userRole != 3) {
            return innerHtml1 + innerHtml2;
          }

          // return innerHtml1 + innerHtml2 + options; //innerHtml3;
          return innerHtml1 + innerHtml2; // innerHtml3;
        }
      }, ]
    });

    $('#dataTable_processing').hide();
    var tableWrapper = jQuery('#dataTable_wrapper');

    table.find('.group-checkable').change(function() {
      var set = jQuery(this).attr("data-set");
      var checked = jQuery(this).is(":checked");
      jQuery(set).each(function() {
        if (checked) {
          $(this).attr("checked", true);
          $(this).parents('tr').addClass("active");
        } else {
          $(this).attr("checked", false);
          $(this).parents('tr').removeClass("active");
        }
      });
      jQuery.uniform.update(set);
    });

    $('#optionChecked').on('click', function() {
      var cf = confirm('确定导入当前所有？');
      if (cf) {
        jQuery("#dataTable .checkboxes").each(function() {
          if (jQuery(this).is(":checked")) {
            TableLoad.loadStruct(jQuery(this)[0].name);
          }
        });
      }
    });

    table.on('change', 'tbody tr .checkboxes', function() {
      $(this).parents('tr').toggleClass("active");
    });

    tableWrapper.find('.dataTables_length select').addClass("form-control input-xsmall input-inline"); // modify
    // table
    // per
    // page
    // dropdown
  };

  var freshTooltips = function() {
    setTimeout(function() {
      var set = $('.tooltips');
      set.each(function() {
        $(this).tooltip();
      });
    }, 0);
  };

  var freshDropdown = function() {
    $('.dropdown-menu').parent().on('shown.bs.dropdown', function() {
      var $menu = $("ul", this);
      offset = $menu.offset();
      position = $menu.position();
      $('body').append($menu);
      $menu.show();
      $menu.css('position', 'absolute');
      $menu.css('top', (offset.top) + 'px');
      $menu.css('left', (offset.left) + 'px');
      $(this).data("s-menu", $menu);
    });

    $('.dropdown-menu').parent().on('hide.bs.dropdown', function() {
      $(this).append($(this).data("s-menu"));
      $(this).data("s-menu").removeAttr('style');
    });
  }

  var reRunCheckedJob = function() {
    var ids = [];
    var set = jQuery('.group-checkable').attr("data-set");

    jQuery(set).each(function() {
      if ($(this).is(":checked")) {
        ids.push(jQuery(this).attr("data-set"));
      }
    });

    // console.log(ids);
    if (ids.length < 1) {
      toastr['warning']('请至勾选Job', '警告');
      return;
    } else if (ids.length < 2) {
      toastr['warning']('至少勾选2个Job', '警告');
      return;
    }

    bootbox.prompt({
      title : '<i class="icon-speedometer font-blue"></i> 请选择重跑日期 ' + ' <span class="help-block font-red" style="font-size: 12px"> 如果Job不是上线状态，将直接被过滤</span>',
      inputType : 'datetime',
      callback : function(result) {
        /* your callback code */
        if (!_.isNull(result)) {
          $.ajax({
            type : 'POST',
            url : self.contextPath + '/scheduler/task-rerun/api/submit',
            data : {
              "jobIds" : ids.toString(),
              "runTime" : result
            },
            async : true,
            success : function(rs) {
              if (rs.status == 'success') {
                window.location.href = self.contextPath + '/scheduler/task-rerun/detail?id=' + rs.task.id;
              } else {
                toastr['warning'](rs.msg, '警告');
              }
            }
          });
        }
      }
    });

  }

  var reRunOwnAllJob = function() {
    bootbox.prompt({
      title : '<i class="icon-speedometer font-blue"></i> 请选择重跑日期 ' + ' <span class="help-block font-red" style="font-size: 12px"> 如果Job不是上线状态，将直接被过滤</span>',
      inputType : 'datetime',
      callback : function(result) {
        /* your callback code */
        if (!_.isNull(result)) {
          $.ajax({
            type : 'POST',
            url : self.contextPath + '/scheduler/task-rerun/api/submit',
            data : {
              "type" : 1,
              "runTime" : result
            },
            async : true,
            success : function(rs) {
              if (rs.status == 'success') {
                window.location.href = self.contextPath + '/scheduler/task-rerun/detail?id=' + rs.task.id;
              } else {
                toastr['warning'](rs.msg, '警告');
              }
            }
          });
        }
      }
    });
  }

  var reRunThisJob = function(schedulerId) {
    bootbox.prompt({
      title : '<i class="icon-speedometer font-blue"></i> 请选择日期',
      inputType : 'datetime',
      callback : function(result) {
        /* your callback code */
        // console.log('run this job: ' + schedulerId + ', at ' + result);
        if (!_.isNull(result)) {
          var details = {
            runMode : 0,
            runDateTime : result.trim(),
          };
          $.ajax({
            type : "POST",
            url : self.contextPath + "/old-page/dev/task/runJobAloneByManualAction",
            async : false,
            data : {
              "schedulerId" : schedulerId,
              "detail" : JSON.stringify(details)
            },
            dataType : 'json',
            success : function(data) {
              if (data == 'true') {
                toastr['success']('操作成功', '提示');
                var page = self.oTable.page.info().page;
                self.oTable.page(page).draw(false);
              } else {
                toastr['error']('运行失败', '错误');
              }
            },
            error : function(e) {
              toastr['error']('运行失败' + e.statusText, '错误');
            }
          });

        }
      }
    });
  }

  var reRunCheckedJobHistory = function() {
    var ids = [];
    var set = jQuery('.group-checkable').attr("data-set");

    jQuery(set).each(function() {
      if ($(this).is(":checked")) {
        ids.push(jQuery(this).attr("data-set"));
      }
    });

    // console.log(ids);
    if (ids.length < 1) {
      toastr['warning']('请至勾选Job', '警告');
      return;
    }
    bootbox.dialog({
      message : '<div class="input-prepend input-group"><span class="add-on input-group-addon"><i class="glyphicon glyphicon-calendar fa fa-calendar"></i></span>' + '<input type="text" style="width: 200px" name="reservation" id="reservation" class="form-control active" value="">' + '</div>' + '<span class="help-block bootbox-help-block">请输入日期，默认昨天</span>',
      title : '<i class="icon-speedometer font-blue"></i> 请选择时间段',
      buttons : {
        Cancel : {
          label : "取消",
          className : "btn-default",
          callback : function() {
          }
        },
        main : {
          label : "保存",
          className : "btn-primary",
          callback : function() {
            var result = $("#reservation").val();
            if (!_.isNull(result)) {
              $.ajax({
                type : 'POST',
                url : self.contextPath + '/scheduler/task-rerun/api/submit',
                data : {
                  "type" : 2,
                  "jobIds" : ids.toString(),
                  "runTime" : result
                },
                async : true,
                success : function(rs) {
                  if (rs.status == 'success') {
                    window.location.href = self.contextPath + '/scheduler/task-rerun/detail?id=' + rs.task.id;
                  } else {
                    toastr['warning'](rs.msg, '警告');
                  }
                }
              });
            }
          }
        }
      }
    });
    var yesterday = getDateStr(-1);
    var today = getDateStr(0);
    $('#reservation').daterangepicker({
      autoUpdateInput : false,
      startDate : yesterday,
      endDate : yesterday,
      maxDate : today,
      locale : {
        format : 'YYYY-MM-DD',
        cancelLabel : 'Clear'
      }
    });

    $('#reservation').on('apply.daterangepicker', function(ev, picker) {
      $(this).val(picker.startDate.format('YYYY-MM-DD') + '|' + picker.endDate.format('YYYY-MM-DD'));
    });

    $('#reservation').on('cancel.daterangepicker', function(ev, picker) {
      $(this).val('');
    });
  }

  var getDateStr = function(AddDayCount) {
    var dd = new Date();
    dd.setDate(dd.getDate() + AddDayCount);// 获取AddDayCount天后的日期
    var y = dd.getFullYear();
    var m = dd.getMonth() + 1;// 获取当前月份的日期
    var d = dd.getDate();
    return dd;
    // return y+"-"+m+"-"+d;
  }

  var reRunThisJobToEnd = function(jobId) {
    bootbox.prompt({
      title : '<i class="icon-speedometer font-blue"></i> 请选择日期 <span class="help-block" style="font-size: 12px"> 是否从该Job重跑？ 确定后可进行Job移除</span>',
      inputType : 'datetime',
      callback : function(runTime) {
        /* your callback code */
        if (!_.isNull(runTime)) {
          getJobDependency(jobId, runTime);
        }
      }
    });
  }

  var editThisJob = function(schedulerId) {
    alert('edit this job ' + schedulerId);
  }

  var getPendingJobs = function(schedulerId) {
    bootbox.confirm('确认要取消吗?', function(event) {
      if (event) {
        $.ajax({
          type : "POST",
          url : self.contextPath + "/old-page/dev/task/getPendingJobs",
          async : false,
          data : {},
          dataType : 'json',
          success : function(data) {
            data = JSON.parse(data);
            for (var i = 0, l = data.length; i < l; i++) {
              if (schedulerId == data[i].schedulerId) {
                stopPendingJob(data[i].excuteId, schedulerId)
              }
            }
          },
          error : function(e) {
            toastr['error']('获取等待队列失败 ' + e.statusText, '错误');
          }
        });
      }
    });
  };

  var stopPendingJob = function(excuteId, schedulerId) {
    $.ajax({
      type : "POST",
      url : self.contextPath + "/old-page/dev/task/stopPendingJob",
      async : false,
      data : {
        "excuteId" : excuteId
      },
      dataType : 'json',
      success : function(data) {
        if (data == 'true') {
          toastr['success']('操作成功', '提示');
        } else {
          toastr['error']('操作失败', '错误');
        }
        // 刷新当前页面
        var page = self.oTable.page.info().page;
        self.oTable.page(page).draw(false);
      }
    });
  }

  var killRunningJob = function(schedulerId) {
    bootbox.confirm('确认要终止吗？', function(event) {
      if (event) {
        $.ajax({
          type : "POST",
          url : self.contextPath + "/old-page/dev/task/killRunningJob",
          async : false,
          data : {
            "excuteId" : "",
            "schedulerId" : schedulerId
          },
          dataType : 'json',
          success : function(data) {
            console.log(data);
            if (data == 'true') {
              var html = '<span class="mini-label mini-label-danger">被kill</span>';
              // $("#jobState-" + schedulerId).html(html);
              // $('#killJob-' +
              // schedulerId).linkbutton('disable').linkbutton('select')
              toastr['success']('操作成功', '提示');
            } else {
              toastr['error'](data.message);
            }
            // 刷新当前页面
            var page = self.oTable.page.info().page;
            self.oTable.page(page).draw(false);
          }
        });
      }
    });
  }
  // 确定job的依赖关系
  var confirmDeleteJobRelation = function(jobId) {
    var flag;
    $.ajax({
      type : "POST",
      url : self.contextPath + "/old-page/dev/task/checkJobHaveChilds",
      async : false,
      data : {
        "jobId" : jobId
      },
      dataType : 'json',
      success : function(data) {
        if (data == 'false') {
          // 不存在子job
          flag = true;
        } else {
          // 存在子依赖job
          flag = false;
        }
      }
    });
    return flag;
  }
  // 修改状态
  var changeJobStatus = function(schedulerId, status) {
    $.ajax({
      type : "POST",
      url : self.contextPath + "/old-page/dev/task/changeSchedulerStatusAction",
      async : false,
      data : {
        "schedulerId" : schedulerId,
        "schedulerStatus" : status
      },
      dataType : 'json',
      success : function(data) {
        if (data.status == 'ok') {
          if (data.data == 'true') {
            var html = '';
            // 上线
            if (status == 1) {
              html = '<span class="mini-label mini-label-success">上线</span>';
            } else if (status == 2) {
              html = '<span class="mini-label mini-label-warning">下线</span>';
            } else if (status == 3) {
              html = '<span class="mini-label mini-label-danger">删除</span>';
              // $("#schedulerStatus" +
              // schedulerId).parent().parent().slideUp();
            }
            // 刷新当前页面
            var page = self.oTable.page.info().page;
            self.oTable.page(page).draw(false);

            toastr["success"]('操作成功', '提示');
          } else if (data.data == 'runTimeIllegal') {
            bootbox.confirm('调度时间未设置，立即去设置?', function(r) {
              if (r) {
                window.location.href = self.contextPath + '/old-page/dev/task/editSchdulerJobAction?schedulerId=' + schedulerId;
              }
            });
          }
        } else {
          toastr["error"]('修改调度状态失败', data.data);
        }
      }
    });
  }

  var checkCron = function(cronExpression) {
    var value = cronExpression; // 传递过来真正要验证的字符串

    if (value != "") {
      value = value.replace(/(^\s*)|(\s*$)/g, ""); // 去掉前后空白
      var arr = value.split(/\s+/); // 用空白分割

      if (arr.length != 6 && arr.length != 7) {
        toastr['warning']("表达式必须是 由5个或者6个空格隔开，如 0 0 12 * * ?");
        return false;
      } else {
        // 为了清晰起见，我将规则拆分来写
        var reg1 = /^([0-5]?\d)([\/\-][0-5]?\d)?$/;// 形如23 23/34 45-59
        var reg2 = /^[0-5]?\d(,[0-5]?\d)*$/;// 形如 12,43,56
        var reg3 = /^\*$/;// 匹配 *

        if (!(reg1.test(arr[0]) || reg2.test(arr[0]) || reg3.test(arr[0]))) {
          toastr['warning']("Cron表达式第1位是秒，允许的值（0-59 ,-*/）如 （2,47,23-45,5/6）");
          return false;
        }
        // 为了禁止用户误选择秒级调度做判断
        if (arr[0].indexOf("*") >= 0 || arr[0].indexOf("/") >= 0) {
          toastr['warning']("Cron表达式第1位是秒，目前禁止设置秒级调度允许的值（0-59)");
          return false;
        }
        if (!(reg1.test(arr[1]) || reg2.test(arr[1]) || reg3.test(arr[1]))) {
          toastr['warning']("Cron表达式第2位是分，允许的值（0-59 ,-*/）如 （2,47,23-45,5/6）");
          return false;
        }
        // reg1=/^(([0-1]?\d)|(2[0-3]))$/; //ok的 0-23 注意最外层有一个括号
        reg1 = /^(([0-1]?\d)|(2[0-3]))([\/\-](([0-1]?\d)|(2[0-3])))?$/; // 形如23
        // 12/18
        // 7-19
        reg2 = /^(([0-1]?\d)|(2[0-3]))(,(([0-1]?\d)|(2[0-3])))*$/; // 形如12,15,20
        regSpecil = /^(([0-1]?\d)|(2[0-3]))([\-](([0-1]?\d)|(2[0-3])))([\/](([0-1]?\d)|(2[0-3])))$/;
        if (!(reg1.test(arr[2]) || reg2.test(arr[2]) || reg3.test(arr[2]) || regSpecil.test(arr[2]))) {
          toastr['warning']("Cron表达式第3位是小时，允许的值（0-23 ,-*/）如 （3,8,21-23,4/7,*）");
          return false;
        }
        // reg1=/^(([1-9])|([12]\d)|(3[01]))$/; ok 1-31
        reg1 = /^(([1-9])|([12]\d)|(3[01]))([\/\-](([1-9])|([12]\d)|(3[01])))?$/; // 形如1
        // 12/18
        // 7-26
        reg2 = /^(([1-9])|([12]\d)|(3[01]))(,(([1-9])|([12]\d)|(3[01])))*$/; // 形如23,25,30
        reg3 = /^(\*|\?)$/; // 形如 * ?
        var reg4 = /^(((([1-9])|([12]\d)|(3[01]))[WC])|(LW?))$/; // 形如12W 13C L
        // LW
        if (!(reg1.test(arr[3]) || reg2.test(arr[3]) || reg3.test(arr[3]) || reg4.test(arr[3]))) {
          toastr['warning']("Cron表达式第4位是日，允许的值（1-31 ,-*/？L W C）如 （1,20,4-8,3/5,2C,8W,L,LW等）");
          return false;
        }
        // reg1=/^(([1-9])|(1[0-2]))$/; ok 1-12
        reg1 = /^(([1-9])|(1[0-2]))([\/\-](([1-9])|(1[0-2])))?$/;// 形如1 3/6
        // 7-10
        reg2 = /^(([1-9])|(1[0-2]))(,(([1-9])|(1[0-2])))*$/;// 形如3,5,8
        reg3 = /^\*$/;// 形如 *
        reg4 = /^((JAN)|(FEB)|(MAR)|(APR)|(MAY)|(JUN)|(JUL)|(AUG)|(SEPT)|(OCT)|(NOV)|(DEC))(\-((JAN)|(FEB)|(MAR)|(APR)|(MAY)|(JUN)|(JUL)|(AUG)|(SEPT)|(OCT)|(NOV)|(DEC)))?$/i; // 12个月份
        var reg5 = /^((JAN)|(FEB)|(MAR)|(APR)|(MAY)|(JUN)|(JUL)|(AUG)|(SEPT)|(OCT)|(NOV)|(DEC))(,((JAN)|(FEB)|(MAR)|(APR)|(MAY)|(JUN)|(JUL)|(AUG)|(SEPT)|(OCT)|(NOV)|(DEC)))*$/i; // 12个月份

        if (!(reg1.test(arr[4]) || reg2.test(arr[4]) || reg3.test(arr[4]) || reg4.test(arr[4]) || reg5.test(arr[4]))) {
          toastr['warning']("Cron表达式第5位是月，允许的值（1-12 ,-*/ JAN-DEC）如 （1,10,2-6,JAN,MAY-JUN等）", "警告");
          return false;

        }
        reg1 = /^[1-7]([\/\-][1-7])?$/; // 形如1 3/6 2-5
        reg2 = /^[1-7](,[1-7])*$/; // 形如3,5,6
        reg3 = /^(\*|\?|L)$/; // 形如 * ? L
        reg4 = /^((MON)|(TUES)|(WED)|(THUR)|(FRI)|(SAT)|(SUN))([\-]((MON)|(TUES)|(WED)|(THUR)|(FRI)|(SAT)|(SUN)))?$/i; // 形如
        // 7个星期
        // -连接
        reg5 = /^((MON)|(TUES)|(WED)|(THUR)|(FRI)|(SAT)|(SUN))(,((MON)|(TUES)|(WED)|(THUR)|(FRI)|(SAT)|(SUN)))*$/i; // 形如
        // 7个星期
        // ，枚举
        var reg6 = /^[1-7][LC]$/; // 形如 3L 4C
        var reg7 = /^[1-7]?#[1-5]$/; // 形如 #4 6#3

        if (!(reg1.test(arr[5]) || reg2.test(arr[5]) || reg3.test(arr[5]) || reg4.test(arr[5]) || reg5.test(arr[5]) || reg6.test(arr[5]) || reg7.test(arr[5]))) {
          toastr['warning']("Cron表达式第6位是周儿，允许的值（1-7 ,-*/? L C # SUN-SAT）如 （1,2,1-5,?,3C,4L,4#2,SUN等）", "警告");
          return false;
        }
        if (arr.length == 7) {
          // reg1=/^((19[7-9]\d)|(20\d\d))$/; // 1979-2099
          reg1 = /^((19[7-9]\d)|(20\d\d))([\/\-]((19[7-9]\d)|(20\d\d)))?$/;
          reg2 = /^((19[7-9]\d)|(20\d\d))(,((19[7-9]\d)|(20\d\d)))*$/;
          reg3 = /^(\*|(empty))$/i;
          if (!(reg1.test(arr[6]) || reg2.test(arr[6]) || reg3.test(arr[6]))) {
            toastr['warning']("Cron表达式第7位是年(可选字段)，允许的值（empty,1979-2099 ,-*/）如 (2013,empty,2012,2013 2012-2013等)", "警告");
            return false;
          }
        }
        return true;
      }
    } else {
      toastr['error']("调度时间未设置", "错误")
      return false;
    }
  }

  var editTaskDetail = function(url, flag) {
    if (!flag) {
      bootbox.confirm('目前编辑是他人任务，继续编辑?', function(r) {
        if (r) {
          window.location.href = url;
        }
      });
    } else {
      window.location.href = url;
    }
  }
  // 获取重跑任务依赖信息
  var getJobDependency = function(jobId, runTime) {
    self.beginJobIds = jobId + '|2|-1';// (beginJobs|type|parentTaskId)type=1代表前置依赖任务，type=2代表获取后续依赖任务
    $.ajax({
      type : "POST",
      url : self.contextPath + '/old-page/dev/task/getJobAllChildsByJson',
      async : false,
      data : {
        "jobId" : jobId
      },
      dataType : 'json',
      success : function(data) {
        var html = '';
        data = JSON.parse(data);
        // console.log(data);
        if (!(data.length > 0)) {
          toastr['warning']('无法获取到需要重跑的Job', '警告');
          return;
        }

        if (data.length == 1) {
          toastr['warning']('该Job下没有依赖调度', '警告');
          return;
        }
        var jobIds = [];
        _.each(data, function(job) {
          jobIds.push(job.jobId);
        });
        // console.log(jobIds.toString());
        toastr['success']('正在保存Task， 保存成功后页面将做跳转', '提示');
        $.ajax({
          type : 'POST',
          url : self.contextPath + '/scheduler/task-rerun/api/submit',
          data : {
            "jobIds" : jobIds.toString(),
            "runTime" : runTime,
            "beginJobIds" : self.beginJobIds
          },
          async : true,
          success : function(rs) {
            if (rs.status == 'success') {
              window.location.href = self.contextPath + '/scheduler/task-rerun/detail?id=' + rs.task.id;
            } else {
              toastr['error'](rs.msg, '错误');
            }
          }
        });
      }
    });
  }

  var genernateLabels = function(labels) {
    self.labels = [];
    _.each(labels.split('_'), function(label) {
      if (label.trim() != '') {
        self.labels.push(label.trim());
      }
    });
    // console.log(self.labels);
    $.ajax({
      type : 'POST',
      url : self.contextPath + '/scheduler/task/api/job-label-ids',
      data : {
        "ids" : labels
      }, // 格式： 1_2_3_4_
      success : function(rs) {
        var labelList = rs.data;
        var innerHTML = '';
        _.each(labelList, function(label) {
          innerHTML = innerHTML + '<a href="javascript:void(0)" style="height:40px" class="icon-btn" id="label_' + label.id + '">' + label.name + '<button onclick=TaskList.removeLabel(' + label.id + ') type="button" class="badge badge-danger btn btn-circle"><b>&times;</b></button>' + '</a>';

        });
        $('#allreadyLabels').html(innerHTML);
      },
    });
  }
  var editLabels = function(schedulerId, jobId, labels) {
    $('#modal-labels').val('').trigger('change');
    $('#allreadyLabels').html('');
    self.schedulerId = schedulerId;
    self.labels = [];
    if (labels != '') {
      // 生成已有labels
      genernateLabels(labels);
    }

    $('#editLabels').modal('show');
  }

  var switchJobRelations = function(schedulerId, jobId, jobName) {
    $('#switchJobName').val('');
    $('#currentJobName').html(jobName);
    self.jobId = jobId;
    self.currentJobName = jobName;
    $('#switchJobRelations').modal('show');
  }

  var prepareOperation = function() {

    $('#updateLabels').on('click', function() {
      var _ids = $('#modal-labels').val();
      if (!self.labels) {
        self.labels = [];
      }
      self.labels = _ids.concat(self.labels);

      if (self.schedulerId) {
        $.ajax({
          type : 'POST',
          url : self.contextPath + '/scheduler/task/api/update-job-labels',
          data : {
            "ids" : self.labels.toString(),
            "schedulerId" : self.schedulerId
          },
          success : function(rs) {
            if (rs.status == 'success') {
              toastr["success"]("操作成功.", "提示");
              self.oTable.ajax.reload();
            } else {
              toastr["error"]("操作失败.", "提示");
            }
          },
          error : function() {
            toastr["error"]("操作失败.", "提示");
          }
        });
      }
    });

    $('#updateRelations').on('click', function() {
      var switchJobName = $('#switchJobName').val();
      if (self.currentJobName == switchJobName) {
        toastr["error"]("替换失败,替换依赖任务不能是自己", "提示");
        return;
      };
      if (self.jobId) {
        $.ajax({
          type : 'POST',
          url : self.contextPath + '/scheduler/task/api/replace-job-relations',
          data : {
            "jobId" : self.jobId,
            "jobName" : switchJobName
          },
          success : function(rs) {
            if (rs.status == 'success') {
              toastr["success"]("替换成功.", "提示");
            } else {
              toastr["error"]("替换失败," + rs.msg, "提示");
            }
          },
          error : function() {
            toastr["error"]("替换失败.", "提示");
          }
        });
      }
    });
  }

  return {

    init : function(opts) {
      self.contextPath = opts.contextPath;
      self.userId = opts.userId;
      self.userRole = opts.userRole;
      initDataTemplate();
      initTables();
      initJobType();
      initJobLevel();
      initStatus();
      initUserList();
      initJobState();
      initScheduleLevel();
      initOtherFilter();
      initLabels('labels');
      initLabels('modal-labels');
      prepareSearch();
      freshTooltips();
      prepareOperation();
    },

    reRunJob : function(type, schedulerId) {
      if (type == 1) {
        // 重跑勾选Job
        reRunCheckedJob();
      } else if (type == 2) {
        // 重跑我的所有Job
        reRunOwnAllJob();
      } else if (type == 3) {
        // 运行该Job
        reRunThisJob(schedulerId);
      } else if (type == 4) {
        // 从该Job开始运行
        reRunThisJobToEnd(schedulerId);
      } else if (type == 5) {
        // 编辑该Job
        editThisJob(schedulerId);
      } else if (type == 6) {
        // 撤销等待
        getPendingJobs(schedulerId);
      } else if (type == 7) {
        // kill 该job
        killRunningJob(schedulerId);
      } else if (type == 8) {
        // 按时间段重跑勾选Job历史
        reRunCheckedJobHistory();
      }
    },

    editJob : function(status, schedulerId, jobId, runTime) {
      if (status == 2) {
        if (confirmDeleteJobRelation(jobId)) {
          // 修改job调度状态
          changeJobStatus(schedulerId, status);
        } else {
          bootbox.confirm('还有其他job依赖该job, 你确认要暂停吗 ?', function(event) {
            if (event) {
              changeJobStatus(schedulerId, status);
            }
          });
        }
      } else if (status == 3) {
        if (confirmDeleteJobRelation(jobId)) {
          bootbox.confirm('你确认要删除吗 ?', function(event) {
            if (event) {
              changeJobStatus(schedulerId, status);
            }
          });
        } else {
          toastr['error']('还有其他job依赖该job，不能删除或暂停！有疑问请联系管理员', '警告');
        }
      } else if (status == 7) { // 编辑job标签信息
        editLabels(schedulerId, jobId, runTime);
      } else if (status == 8) { // 切换job依赖
        switchJobRelations(schedulerId, jobId, runTime);
      } else {
        // 修改job调度状态为上线
        if (checkCron(runTime)) {
          changeJobStatus(schedulerId, status)
        } else {
          // do nothing
        }
      }
    },
    removeLabel : function(label) {
      var tmp = [];
      self.labels.forEach(function(_label) {
        if (_label != label) {
          tmp.push(_label);
        }
      });
      self.labels = tmp;
      $('#label_' + label).remove();
    }
  }

}();
