var TaskScheduler = (function(){
	var self = $(this);

	var isNullOrEmpty = function(strVal) {
		  if (strVal == '' || strVal == null || strVal == undefined) {
			  return true;
		  } else {
			  return false;
		  }
	}
	
    var initJobLevel = function() {
  	  self.jobLevels = new Array();
  	  $.post(self.contextPath + '/getJobLevelListJson', function(data, status) {
  		  data = $.parseJSON(data);
  	      _.each(data, function(jobLevel){
  	          self.jobLevels.push({id: jobLevel.id, text: jobLevel.name, selected: true});
  	      });
        });

      /*self.jobLevels = [{id: -1, text: '全部'}, {id: 1, text: '一级'}, {id: 2, text: '二级'},
                      {id: 3, text: '三级'}];*/
      $('#jobLevel').select2({
        minimumResultsForSearch:-1,
        "language": {
          "noResults": function() {
            return "无搜索结果";
          }
        },
        placeholder: '选择重要等级',
        data: self.jobLevels
      }).on('change', function(item) {
        /*self.searchForm.jobLevel = $(this).val();*/
      });
      $('#jobLevel').val(2).trigger('change');
    };

    var initStatus = function() {
  	  $('#schedulerStatus').bootstrapToggle('off');
  	  $('#schedulerStatus').change(function() {
  		if($(this).prop('checked')) {
  			$(this).attr('value', 1);
  	    }else{
  	    	if(isNullOrEmpty($('#hidId').val())) {
  	    		$(this).attr('value', 2);
  	    	}else{
  	    		if(confirmNoExistJobRelation()){
  	    			$(this).attr('value', 2);
  	    		}else{
  	    			var swichButton = $(this);
  	    			bootbox.confirm('还有其他job依赖该job, 你确认要暂停吗 ?', function(event) {
  	  	  	            if(event) {
  	  	  	            	swichButton.attr('value', 2);
  	  	  	            }else{
  	  	  	            	$('#schedulerStatus').bootstrapToggle('on');
  	  	  	            }
  	  	  	        });
  	    		}
  	    		
  	    	}
  	    }
  	      
  	  })
    };
    
    //确定job的依赖关系
    var confirmNoExistJobRelation = function() {
      var flag;
      var devId = $('#hidId').val();
      $.ajax({
        type: "POST",
        url:  self.contextPath + "/old-page/dev/task/checkJobHaveChilds",
        async:false,
        data: {"id": devId},
        dataType: 'json',
        success: function(data) {
          if(data=='false'){
            //不存在子job
            flag = true;
          } else {
            //存在子依赖job
            flag = false;
          }
        }
      });
      return flag;
    }
    
    /**
     * 设置 switchbutton 的值，且根据 value 更改 check 状态
     */
    var setSwitchbuttonValue = function(id, v) {
    	v = parseInt(v);
    	switch(v) {
    	case 1:
    		$(id).bootstrapToggle('on');
    		$(id).attr('value',1);
    		break;
    	case 2:
    		$(id).bootstrapToggle('off');
    		$(id).attr('value',2);
    		break;
    	}
    }

    /**
     * 根据 value 选中/取消 checkbox
     * @param id checkBox id
     * @param v checkBox value
     */
    var setCheckBox = function(id, v) {
    	  var box = $(id);
    	  (v==null || parseInt(v) == 0) ? $.uniform.update(box.removeAttr('checked')): $.uniform.update(box.attr('checked', true));
    	  $(id).val(v);
    };
    
    var initHadoopQueueList = function() {
    	var jobType = self.jobType;
        self.queueList = new Array();
        $.post(self.contextPath + '/hadoop/api/getHadoopQueueByDept', function(data, status) {
        	data = $.parseJSON(data);
            _.each(data, function(queue){
            	/*if((jobType==7 || jobType==12) && queue.name.indexOf("spark") > 0){
            		selectQueueId = queue.id;
            	}else if(jobType!=7 && jobType!=12 && queue.name.indexOf("normal") > 0){
            		selectQueueId = queue.id;
            	}*/
                self.queueList.push({id: queue.id, text: queue.name, selected: false});
          });
          var selectQueueId;
          $.post(self.contextPath + '/hadoop/api/getDefaultHadoopQueue',{jobId:$('#hidId').val(),jobType: $('#hidType').val()},function(data){
        	  selectQueueId = data.id;
          });
          $('#hadoopQueue').select2({
            "language": {
              "noResults": function() {
                return "无搜索结果";
              }
            },
            placeholder: '选择队列',
            data: self.queueList
          }).on('change', function(item) {
          });
          
          $('#hadoopQueue').val(selectQueueId).trigger('change');
          
        });
      };
      
      var initOtherSet = function(){
    	  $('#errorRunContinue').change(function() {
    		  if(this.checked) {
    			  $('#errorRunContinue').val(1);
    		  }else{
    			  $('#errorRunContinue').val(0);
    		  }
    	  });

    	  $('#parallelRun').change(function() {
    		  if(this.checked) {
    			  $('#parallelRun').val(1);
    		  }else{
    			  $('#parallelRun').val(0);
    		  }
    	  });
    	  
    	  $('#historyRun').change(function() {
    		  if(this.checked) {
    			  $('#historyRun').val(1);
    		  }else{
    			  $('#historyRun').val(0);
    		  }
    	  });
    	  
    	  $('#isMonitorId').change(function() {
    		  if(this.checked) {
    			  $('#isMonitorId').val(1);
    		  }else{
    			  $('#isMonitorId').val(0);
    		  }
    	  });
    	  
    	  $('#delayWarn').change(function() {
    		  if(this.checked) {
    			  $('#delayWarn').val(1);
    		  }else{
    			  $('#delayWarn').val(0);
    		  }
    	  });
      }

      var initCronExpression = function() {
    	  $('#cronExpression').focus(function() {
    			if($.trim($(this).val()) == ""){
    		            $('#hideCron').show()
    		            $('#showCron').hide()
    		            $("#cronSelect").slideDown()
    		        }
    		    }).blur(function() {
    		    	if($.trim($(this).val()) == ""){
    		            $('#tip-schedulerCron').tooltip('show')
    		        }
          });

    	  $('#showCron').click(function() {
    		  toggleCronSelect();
    	  });

    	  $('#hideCron').click(function() {
    		  toggleCronSelect();
    	  });
      }


      var createCronExp = function(){
    	    var cronExp = "";
    	    var year = $("#year").val();
    	    if(year.length > 1 && year.indexOf("*") == 0){
    	        year = year.toString().substr(2);
    	    }
    	    var month = $("#month").val();
    	    if(month.length > 1 && month.indexOf("*") == 0){
    	        month = month.toString().substr(2);
    	    }
    	    var day = $("#day").val();
    	    if(day.length > 1 && day.indexOf("*") == 0){
    	        day = day.toString().substr(2);
    	    }
    	    var week = $("#week").val();
    	    if(!week){week="*";}
    	    if(week.length > 1 && week.indexOf("*") == 0){
    	        week = week.toString().substr(2);
    	    }
    	    if(week>0){
    	           week = parseInt(week)+1;
    	           if(week==8) week=1;
    	    }

    	    var hour = $("#hour").val();
    	    if(hour.length > 1 && hour.indexOf("*") == 0){
    	        hour = hour.toString().substr(2);
    	    }
    	    var minutes = $("#minutes").val();
    	    if(minutes.length > 1 && minutes.indexOf("*") == 0){
    	        minutes = minutes.toString().substr(2);
    	    }
    	    var seconds = $("#seconds").val();
    	    if(seconds.length > 1 && seconds.indexOf("*") == 0){
    	        seconds = seconds.toString().substr(2);
    	    }

    	    cronExp = seconds + " " + minutes + " " + hour + " " ;
    	    if(week == "*"){
    	        cronExp += day + " " + month + " ? ";
    	    }else if(day == "*" && week != "*"){
    	        cronExp += "? " + month + " " + week + " ";
    	    }else if(day != "*" && week != "*"){
    	    	bootbox.alert("日期和星期不能同时选择!");
    	        return false;
    	    }
    	    cronExp += year;
    	    $("#cronExpression").val(cronExp);

    	}


      var quartzExpressDetail = function(){
        var subtitle = 'quartzExpress语法';
        var icon = 'icon icon-question';
        var url = self.contextPath+'/old-page/scheduler/about.jsp';
        window.open(url, subtitle,"height=500, width=600, top=0,left=0,toolbar=no, menubar=no, scrollbars=no, resizable=no,location=no,status=no");
      }

      var toggleCronSelect = function(){
    	    var $cron=$("#cronSelect")
    	    if($cron.is(":hidden")){
    	        $('#hideCron').show()
    	        $('#showCron').hide()
    	        $cron.slideDown()
    	    } else {
    	        $('#hideCron').hide()
    	        $('#showCron').show()
    	        $cron.slideUp() ;
    	    }
       }
      
      var initDependentTable = function() {
    	    var table = $('#recommJob');
    	    self.dependentTable = table.DataTable({
    	      'serverSide' : true,
    	      'ordering' : false,
    	      'searching' : false,
    	      "ajax": {
    	        url: self.contextPath + '/scheduler/task/api/search-schedule-task',
    	        type: 'POST',
    	        data: function(d) {
    	        	d.columns = null;
    	            d.search = null;
    	            d['searchForm.jobName'] =$.trim($('#searchJob').val());   //self.searchForm.jobName;
    	          //console.log(d);
    	        },
    	        "dataSrc": function(rs) {
    	            return rs.data;
    	        },
    	      },
    	      "fnDrawCallback": function(settings, response) {
    	        //回调函数
    	    	  freshTooltips();
    	        //freshDropdown();
    	      },
    	      "columns": [
    	         { data : "jobId"},
    	         { data : null,
    	           render: function(data, type, full, meta) {
    	             var innerHtml = "";
    	             if (data.jobType == 1) {
    	               innerHtml = "<span class='label bg-green'>数据抽取</span>"
    	             } else if (data.jobType == 2) {
    	               innerHtml = "<span class='label bg-blue-madison'>MySQL脚本</span>"
    	             } else if (data.jobType == 3) {
    	               innerHtml = "<span class='label bg-red'>Hive脚本</span>"
    	             } else if (data.jobType == 4) {
    	               innerHtml = "<span class='label bg-blue'>MR脚本</span>"
    	             } else if (data.jobType == 5) {
    	               innerHtml = "<span class='label bg-blue-steel'>SHELL脚本</span>"
    	             } else if (data.jobType == 7) {
    	               innerHtml = "<span class='label bg-green-haze'>SPARK脚本</span>"
    	             } else if (data.jobType == 8) {
    	               innerHtml = "<span class='label bg-yellow-crusta'>STORM脚本</span>"
    	             }else if (data.jobType == 9) {
    	               innerHtml = "<span class='label bg-yellow-crusta'>Wcrontab</span>"
    	             } else if (data.jobType == 10) {
      	               innerHtml = "<span class='label bg-yellow-crusta'>HIVE2HBASE</span>"
    	             } else if (data.jobType == 11) {
      	               innerHtml = "<span class='label bg-yellow-crusta'>WTable</span>"
    	             } else if (data.jobType == 12) {
      	               innerHtml = "<span class='label bg-green-haze'>Spark-Streaming</span>"
      	             } else {
    	               innerHtml = "<span class='label bg-grey'>其它</span>"
    	             }
    	             return innerHtml;
    	           },
    	         },
    	         { data : null,
    	           render: function(data, type, full, meta) {
    	             var jobName = data.jobName;
    	             if (jobName && jobName.length > 45) {
    	               jobName = jobName.substring(0, 45) + '...';
    	             }
    	             return '<a target="_blank" href = "' + self.contextPath + '/scheduler/task/detail?schedulerId=' + data.jobId + '" title="'+ data.jobName+'">' + jobName + '</a>';
    	           }
    	         },
    	         {
                   data : null,
                   render : function(data,type,full,meta){
                     var html = '';
                     if(!data.outValue || data.outValue == ''){
                       return html;
                     }
                     var search = $('#searchJob').val();
                     if(data.outMode == 1){
                       var arr = JSON.parse(data.outValue);
                       $.each(arr,function(i,element){
                         if(element.name.indexOf(search) != -1){
                           html += element.name + '<br/>';
                         }
                       });
                     }else if(data.outMode == 2){
                       var arr = data.outValue.split(',');
                       $.each(arr,function(i,element){
                         if(element.indexOf(search) != -1){
                           html += element + '<br/>';
                         }
                       });
                     }
                     return html;
                   },
                 },
    	         { data : "nextFireTime"},
    	         { data : "userName"},
    	         { data : null,
    	           render: function(data, type, full, meta) {
    	             var innerHtml = "";
    	             if (data.status == 0) {
    	               innerHtml = "<span class='label bg-yellow'>草稿</span>"
    	             } else if (data.status == 1) {
    	               innerHtml = "<span class='label bg-green'>上线</span>"
    	             } else if (data.status == 2) {
    	               innerHtml = "<span class='label bg-red'>暂停</span>"
    	             } else {
    	               innerHtml = "<span class='label bg-grey'>其它</span>"
    	             }
    	             return innerHtml;
    	           }
    	         },
    	         { data : null,
    	             render: function(data, type, full, meta) {
    	               return '<i onclick="TaskScheduler.moveDependencyJob('+data.jobId+',this)" value="'+data.jobId+'" class="btn btn-sm green icon-add">添加</i>';
    	             }
    	         }
    	       ],
    	    });
    	    $('#recommJob_processing').hide();

    	    $('#searchJob').blur(function() {
    	    	$('#searchJob').val($.trim($(this).val()));
    	    	if($.trim($(this).val()) != ""){
    	    		self.dependentTable.ajax.reload();
    	        }
    	    });

    	    $("#searchJob").bind("keydown",function(e){
    	        // 兼容FF和IE和Opera
    	    var theEvent = e || window.event;
    	    var code = theEvent.keyCode || theEvent.which || theEvent.charCode;
    	    if (code == 13) {
    		        //回车执行查询
    	    	    $('#searchJob').val($.trim($(this).val()));
    		    	if($.trim($(this).val()) != ""){
    		    		self.dependentTable.ajax.reload();
    		        }
    	        }
    	    });
    	    var tableWrapper = jQuery('#recommJob_wrapper');
    	    table.find('.group-checkable').change(function () {
    	        var set = jQuery(this).attr("data-set");
    	        var checked = jQuery(this).is(":checked");
    	        jQuery(set).each(function () {
    	            if (checked) {
    	                $(this).attr("checked", true);
    	                $(this).parents('tr').addClass("active");
    	            } else {
    	                $(this).attr("checked", false);
    	                $(this).parents('tr').removeClass("active");
    	            }
    	        });
    	        jQuery.uniform.update(set);
    	    });
    	   }

    	   var initHaveDependentTable = function() {
    		   if(isNullOrEmpty($('#hidId').val())) return;
    	        var table = $('#dependentJobs');
    	        self.haveDependentTable = table.DataTable({
    	          'serverSide' : true,
                'ordering' : false,
                'searching' : false,
    	          "ajax": {
    	            url: self.contextPath + '/scheduler/task/api/fetch-dependent-jobs',
    	            type: 'POST',
    	            data: function(d) {
    	            	d.columns = null;
    	                d.search = null;
    	              d['searchForm.jobTaskId'] = $('#hidId').val();   //self.searchForm.jobName;
    	            },
    	            "dataSrc": function(rs) {
    	                return rs.data;
    	            },
    	          },
    	          "fnDrawCallback": function(settings, response) {
    	        	  //回调函数
    	        	  freshTooltips();
    	        	  //freshDropdown();
    	          },
    	          "fnInitComplete": function(oSettings, response) {
    	              var arr = new Array();
    	        	  $(response.data).each(function(index, job) {
    	        		  arr.push(job.jobId);
    	        	  });
    	        	  dependencies = arr.toString();
    	        	  $('#dependencyJobIds').val(dependencies);
    	          },
    	          "columns": [
    	             { data : "jobId"},
    	             { data : null,
    	               render: function(data, type, full, meta) {
    	                 var innerHtml = "";
    	                 if (data.jobType == 1) {
    	                   innerHtml = "<span class='label bg-green'>数据抽取</span>"
    	                 } else if (data.jobType == 2) {
    	                   innerHtml = "<span class='label bg-blue-madison'>MySQL脚本</span>"
    	                 } else if (data.jobType == 3) {
    	                   innerHtml = "<span class='label bg-red'>Hive脚本</span>"
    	                 } else if (data.jobType == 4) {
    	                   innerHtml = "<span class='label bg-blue'>MR脚本</span>"
    	                 } else if (data.jobType == 5) {
    	                   innerHtml = "<span class='label bg-blue-steel'>SHELL脚本</span>"
    	                 } else if (data.jobType == 7) {
    	                   innerHtml = "<span class='label bg-green-haze'>SPARK脚本</span>"
    	                 } else if (data.jobType == 8) {
	    	               innerHtml = "<span class='label bg-yellow-crusta'>STORM脚本</span>"
	    	             }else if (data.jobType == 9) {
	    	               innerHtml = "<span class='label bg-yellow-crusta'>Wcrontab</span>"
	    	             } else if (data.jobType == 10) {
	      	               innerHtml = "<span class='label bg-yellow-crusta'>HIVE2HBASE</span>"
	    	             } else if (data.jobType == 11) {
	      	               innerHtml = "<span class='label bg-yellow-crusta'>WTable</span>"
	    	             } else if (data.jobType == 12) {
	      	               innerHtml = "<span class='label bg-green-haze'>Spark-Streaming</span>"
	      	             } else {
	    	               innerHtml = "<span class='label bg-grey'>其它</span>"
	    	             }
    	                 return innerHtml;
    	               },
    	             },
    	             { data : null,
    	               render: function(data, type, full, meta) {
    	                 var jobName = data.jobName;
    	                 if (jobName && jobName.length > 45) {
    	                   jobName = jobName.substring(0, 45) + '...';
    	                 }
    	                 return '<a target="_blank" href = "' + self.contextPath + '/scheduler/task/detail?schedulerId=' + data.jobId + '" target="_blank">' + jobName + '</a>';
    	               }
    	             },
    	             {
                       data : null,
                       render : function(data,type,full,meta){
                         var html = '';
                         if(!data.outValue || data.outValue == ''){
                           return html;
                         }
                         var search = $('#searchJob').val();
                         if(data.outMode == 1){
                           var arr = JSON.parse(data.outValue);
                           $.each(arr,function(i,element){
                             if(element.name.indexOf(search) != -1){
                               html += element.name + '<br/>';
                             }
                           });
                         }else if(data.outMode == 2){
                           var arr = data.outValue.split(',');
                           $.each(arr,function(i,element){
                             if(element.indexOf(search) != -1){
                               html += element + '<br/>';
                             }
                           });
                         }
                         return html;
                       },
                     },
    	             { data : "nextFireTime"},
    	             { data : "userName"},
    	             { data : null,
    	               render: function(data, type, full, meta) {
    	                 var innerHtml = "";
    	                 if (data.status == 0) {
    	                   innerHtml = "<span class='label bg-yellow'>草稿</span>"
    	                 } else if (data.status == 1) {
    	                   innerHtml = "<span class='label bg-green'>上线</span>"
    	                 } else if (data.status == 2) {
    	                   innerHtml = "<span class='label bg-red'>暂停</span>"
    	                 } else {
    	                   innerHtml = "<span class='label bg-grey'>其它</span>"
    	                 }
    	                 return innerHtml;
    	               }
    	             },
    	             { data : null,
    	                 render: function(data, type, full, meta) {
    	                    return '<i onclick="TaskScheduler.moveDependencyJob('+data.jobId+',this)" value="'+data.jobId+'" class="btn btn-sm green icon-remove">移除</i>';
    	                 }
    	             }
    	           ],
    	     });

    	    $('#dependentJobs_processing').hide();

    	    var tableWrapper = jQuery('#dependentJobs_wrapper');
    	   }
    	   
    	   /**
    	    * 加载依赖信息
    	    */
    	   var loadDependencies =function(dependencies) {
    	   	//获取当前任务所有依赖
    	 	initHaveDependentTable();
    	   }

    	  /**
    	   * 点击添加，删除依赖 job 时的共用方法
    	   * @param jobId
    	   */
    	  function moveDependencyJob(jobId,ths) {
    	  	if($(ths).hasClass('icon-ok')) return; //已添加的

    	  	if($(ths).hasClass('icon-add') && addDependencyJob(jobId)) { //可添加的
    	  		var obj =$(ths).removeClass('icon-add').addClass('icon-remove').html('移除').parent().parent().clone(true);
    	  		$('#dependentJobs tbody').append(obj[0].outerHTML);
    	  		$(ths).removeClass('icon-remove').addClass('icon-ok').html('添加');
    	  		$(ths).attr("disabled","true");
    	  	} else if($(ths).hasClass('icon-remove') && removeDependencyJob(jobId)) { //可移除的
    	  		$(ths).parent().parent().remove();
    	  	}

    	  	refreshJobStatus();
    	  }

    	  /**
    	   * 判断是否已经添加，如果未添加则加入列表
    	   * @param jobId
    	   * @returns {Boolean}
    	   */
    	  function addDependencyJob(jobId) {
    	  	var dependencyJobIds = $('#dependencyJobIds').val();
    	  	var dependencyJobIdArray;
    	  	if(dependencyJobIds != '') {
    	  		dependencyJobIdArray = dependencyJobIds.split(',');
    	  	}else{
    	  		dependencyJobIdArray = new Array();
    	  	}
    	  	if($.inArray(jobId.toString(), dependencyJobIdArray) >= 0) { //如果已经添加过，不能重复添加
    	  		toastr.warning('不能重复添加依赖');
    	  		return false;
    	  	} else { //如果没有添加，则添加
    	  		dependencyJobIdArray.push(jobId.toString());
    	  		$('#dependencyJobIds').val(dependencyJobIdArray.toString());
    	  		return true;
    	  	}
    	  }

    	  /**
    	   * 如果列表中没该 Job
    	   * @param jobId
    	   * @returns {Boolean}
    	   */
    	  function removeDependencyJob(jobId) {
    	  	var dependencyJobIds = $('#dependencyJobIds').val().split(',');
    	  	var index = $.inArray(jobId.toString(), dependencyJobIds);
    	  	if(index > -1) { //如果 job 存在，从列表中移除
    	  		dependencyJobIds.splice(index,1);
    	  		$('#dependencyJobIds').val(dependencyJobIds.toString());
    	  		return true;
    	  	} else { // 如果 job 不存在，则不用删除
    	  		return false;
    	  	}
    	  }

    	  /**
    	   * 根据已经添加的依赖列表，刷新列表的状态
    	   */
    	  function refreshJobStatus () {
    	  	$('#recommJob').find('i').each(function() {
    	  		$(this).removeClass(function() {return $(this).attr('class');}).addClass('btn btn-sm green icon-add');
    	  		$(this).attr('disabled',false);
    	  	});
    	  	if($('#dependencyJobIds').val() == '') return;
    	  	$.each($('#dependencyJobIds').val().split(','), function(i,jobId) {
    	  		$('#recommJob').find('i').each(function() {
    	  			if($(this).attr('value') == jobId) {
    	  				$(this).removeClass(function() {return $(this).attr('class');}).addClass('btn btn-sm green icon-ok');
    	  				$(this).attr('disabled',true);
    	  			}
    	  		});
    	  	});
    	  }

    	  var freshTooltips = function() {
    	    setTimeout(function() {
    	      var set = $('.tooltips');
    	      set.each(function() {
    	        $(this).tooltip();
    	      });
    	    }, 0);
    	  };

    	  var freshDropdown = function() {
    	    $('.dropdown-menu').parent().on('shown.bs.dropdown', function () {
    	      var $menu = $("ul", this);
    	      offset = $menu.offset();
    	      position = $menu.position();
    	      $('body').append($menu);
    	      $menu.show();
    	      $menu.css('position', 'absolute');
    	      $menu.css('top', (offset.top) + 'px');
    	      $menu.css('left', (offset.left) + 'px');
    	      $(this).data("s-menu", $menu);
    	    });

    	    $('.dropdown-menu').parent().on('hide.bs.dropdown', function () {
    	      $(this).append($(this).data("s-menu"));
    	      $(this).data("s-menu").removeAttr('style');
    	    });
    	  }
    	  
    	  /**
    	   * 将调度和依赖配置作为公共部分提供时的表单验证
    	   */
    	  var validateScheduler = function() {
    	  	var jobStatus =  $('#schedulerStatus').attr('value');
    	  	var jobType = $('#hidType').val();
    	  	if(jobType!=8 && jobType!=12 && !checkCron() && jobStatus==1){
    	  		setSwitchbuttonValue('#schedulerStatus', 2);
    	  		toastr.warning('调度时间设置不对,系统把调度状态置为下线');
    	  	}
    	  	if($('#retry').val() > 0){
    	  	  toastr.warning('任务设定了重跑次数，任务将在执行失败后自动重试'+$('#retry').val()+'次，如非必要请将重跑次数置为0。');
    	  	}
    	  	/*if(($('#delayWarn').val())==1){
    	  		var delayWarnLine = $('#delayWarnLine').val();
    	  		var re = /^(?:[01]\d|2[0-3])(?::[0-5]\d){2}$/;
                var result = re.test(delayWarnLine);
                if(!result && isNaN(delayWarnLine)){
                	toastr.warning('调度延迟报警不合法,输入内容必须是Number或者HH:mm:ss格式');
                }
    	  	}*/
    	  	return {
    	  		status: $('#schedulerStatus').attr('value'),
    	  		jobLevel: $('#jobLevel').val(),
    	  		hadoopQueueId: $('#hadoopQueue').val(),
    	  		retry: $('#retry').val(),
    	  		retryTimeSpan: $('#retryTimeSpan').val(),
    	  		errorRunContinue: $('#errorRunContinue').val(),
    	  		parallelRun: $('#parallelRun').val(),
    	  		historyRun: $('#historyRun').val(),
    	  		isMonitor: $('#isMonitorId').val(),
    	  		delayWarn: $('#delayWarn').val(),
    	  		delayWarnLine: $('#delayWarnLine').val(),
    	  		receiver: $('#receiver').val().join(","),
    	  		runTime: $('#cronExpression').val()
    	  	};
    	  }	  
    	  
    	  /**
    	   * 加载调度信息
    	   */
    	  var loadScheduler = function(scheduler) {
    	  	if(!scheduler) {
    	  		var schedulerJson = ajaxGetScheduler();
    	  		if(schedulerJson) {
    	  			scheduler = schedulerJson;
    	  		}
    	  	}
    	  	renderScheduler(scheduler);
    	  }

    	  /**
    	   * 将调度信息显示到页面上
    	   * @param scheduler
    	   */
    	  var renderScheduler = function(scheduler) {
    	    console.log(scheduler);
    	  	if(scheduler.jobLevel != 0){
    	  		$('#jobLevel').val(scheduler.jobLevel).trigger('change');
    	  	}
    	  	if(scheduler.hadoopQueueId !=''){
    	  		$('#hadoopQueue').val(scheduler.hadoopQueueId).trigger('change');
    	  	}
    	  	$('#retry').val(scheduler.retry).trigger('change');
    	  	$('#retryTimeSpan').val(scheduler.retryTimeSpan).trigger('change');

    	  	setCheckBox('#errorRunContinue', scheduler.errorRunContinue);
    	  	setCheckBox('#parallelRun', scheduler.parallelRun);
    	  	setCheckBox('#historyRun', scheduler.historyRun);
    	  	setCheckBox('#isMonitorId', scheduler.isMonitor);
    	  	setCheckBox('#delayWarn', (scheduler.delayWarn ==null)?1:scheduler.delayWarn);

    	  	setSwitchbuttonValue('#schedulerStatus', scheduler.status);

    	  	$('#receiver').val(scheduler.receiver.split(',')).trigger('change');
    	  	$('#cronExpression').val(scheduler.runTime);
    	  	$('#delaySeconds').val(scheduler.delaySeconds);
    	  }

    	  /**
    	   * 异步获取调度信息
    	   * @returns
    	   */
    	  var ajaxGetScheduler = function() {
    	  	var scheduler = null;
    	  	var devId = $('#hidId').val();
    	  	$.ajax({
    	  		type: 'POST',
    	  		url: 'getSchedulerJobByDevId',
    	  		data: {'devId':devId},
    	  		dataType: 'json',
    	  		success: function(data) {
    	  			if(data) {
    	  				var json = eval('(' + data + ')');
    	  				scheduler = json[0];
    	  			}
    	  		}
    	  	});

    	  	return scheduler;
    	  }
    	  
    	  var checkCron = function() {
    		    var value = $("#cronExpression").val();; // 传递过来真正要验证的字符串

    		    if (value != "") {
    		      value = value.replace(/(^\s*)|(\s*$)/g, ""); // 去掉前后空白
    		      var arr = value.split(/\s+/); // 用空白分割

    		      if (arr.length != 6 && arr.length != 7) {
    		        toastr['warning']("表达式必须是 由5个或者6个空格隔开，如 0 0 12 * * ?");
    		        return false;
    		      } else {
    		        // 为了清晰起见，我将规则拆分来写
    		        var reg1 = /^([0-5]?\d)([\/\-][0-5]?\d)?$/;// 形如23 23/34 45-59
    		        var reg2 = /^[0-5]?\d(,[0-5]?\d)*$/;// 形如 12,43,56
    		        var reg3 = /^\*$/;// 匹配 *

    		        if (!(reg1.test(arr[0]) || reg2.test(arr[0]) || reg3.test(arr[0]))) {
    		          toastr['warning']("Cron表达式第1位是秒，允许的值（0-59 ,-*/）如 （2,47,23-45,5/6）");
    		          return false;
    		        }
    		        // 为了禁止用户误选择秒级调度做判断
    		        if (arr[0].indexOf("*") >= 0 || arr[0].indexOf("/") >= 0) {
    		          toastr['warning']("Cron表达式第1位是秒，目前禁止设置秒级调度允许的值（0-59)");
    		          return false;
    		        }
    		        if (!(reg1.test(arr[1]) || reg2.test(arr[1]) || reg3.test(arr[1]))) {
    		          toastr['warning']("Cron表达式第2位是分，允许的值（0-59 ,-*/）如 （2,47,23-45,5/6）");
    		          return false;
    		        }
    		        // reg1=/^(([0-1]?\d)|(2[0-3]))$/; //ok的 0-23 注意最外层有一个括号
    		        reg1 = /^(([0-1]?\d)|(2[0-3]))([\/\-](([0-1]?\d)|(2[0-3])))?$/; // 形如23
    		                                                                        // 12/18
    		                                                                        // 7-19
    		        reg2 = /^(([0-1]?\d)|(2[0-3]))(,(([0-1]?\d)|(2[0-3])))*$/; // 形如12,15,20
    		        
    		        regSpecil = /^(([0-1]?\d)|(2[0-3]))([\-](([0-1]?\d)|(2[0-3])))([\/](([0-1]?\d)|(2[0-3])))$/;
    		        if (!(reg1.test(arr[2]) || reg2.test(arr[2]) || reg3.test(arr[2]) || regSpecil.test(arr[2]))) {
    		          toastr['warning']("Cron表达式第3位是小时，允许的值（0-23 ,-*/）如 （3,8,21-23,4/7,*）");
    		          return false;
    		        }
    		        // reg1=/^(([1-9])|([12]\d)|(3[01]))$/; ok 1-31
    		        reg1 = /^(([1-9])|([12]\d)|(3[01]))([\/\-](([1-9])|([12]\d)|(3[01])))?$/; // 形如1
    		                                                                                  // 12/18
    		                                                                                  // 7-26
    		        reg2 = /^(([1-9])|([12]\d)|(3[01]))(,(([1-9])|([12]\d)|(3[01])))*$/; // 形如23,25,30
    		        reg3 = /^(\*|\?)$/; // 形如 * ?
    		        var reg4 = /^(((([1-9])|([12]\d)|(3[01]))[WC])|(LW?))$/; // 形如12W 13C L LW
    		        if (!(reg1.test(arr[3]) || reg2.test(arr[3]) || reg3.test(arr[3]) || reg4
    		            .test(arr[3]))) {
    		          toastr['warning']("Cron表达式第4位是日，允许的值（1-31 ,-*/？L W C）如 （1,20,4-8,3/5,2C,8W,L,LW等）");
    		          return false;
    		        }
    		        // reg1=/^(([1-9])|(1[0-2]))$/; ok 1-12
    		        reg1 = /^(([1-9])|(1[0-2]))([\/\-](([1-9])|(1[0-2])))?$/;// 形如1 3/6 7-10
    		        reg2 = /^(([1-9])|(1[0-2]))(,(([1-9])|(1[0-2])))*$/;// 形如3,5,8
    		        reg3 = /^\*$/;// 形如 *
    		        reg4 = /^((JAN)|(FEB)|(MAR)|(APR)|(MAY)|(JUN)|(JUL)|(AUG)|(SEPT)|(OCT)|(NOV)|(DEC))(\-((JAN)|(FEB)|(MAR)|(APR)|(MAY)|(JUN)|(JUL)|(AUG)|(SEPT)|(OCT)|(NOV)|(DEC)))?$/i; // 12个月份
    		        var reg5 = /^((JAN)|(FEB)|(MAR)|(APR)|(MAY)|(JUN)|(JUL)|(AUG)|(SEPT)|(OCT)|(NOV)|(DEC))(,((JAN)|(FEB)|(MAR)|(APR)|(MAY)|(JUN)|(JUL)|(AUG)|(SEPT)|(OCT)|(NOV)|(DEC)))*$/i; // 12个月份

    		        if (!(reg1.test(arr[4]) || reg2.test(arr[4]) || reg3.test(arr[4])
    		            || reg4.test(arr[4]) || reg5.test(arr[4]))) {
    		          toastr['warning']("Cron表达式第5位是月，允许的值（1-12 ,-*/ JAN-DEC）如 （1,10,2-6,JAN,MAY-JUN等）", "警告");
    		          return false;

    		        }
    		        reg1 = /^[1-7]([\/\-][1-7])?$/; // 形如1 3/6 2-5
    		        reg2 = /^[1-7](,[1-7])*$/; // 形如3,5,6
    		        reg3 = /^(\*|\?|L)$/; // 形如 * ? L
    		        reg4 = /^((MON)|(TUES)|(WED)|(THUR)|(FRI)|(SAT)|(SUN))([\-]((MON)|(TUES)|(WED)|(THUR)|(FRI)|(SAT)|(SUN)))?$/i; // 形如
    		                                                                                                                        // 7个星期
    		                                                                                                                        // -连接
    		        reg5 = /^((MON)|(TUES)|(WED)|(THUR)|(FRI)|(SAT)|(SUN))(,((MON)|(TUES)|(WED)|(THUR)|(FRI)|(SAT)|(SUN)))*$/i; // 形如
    		                                                                                                                    // 7个星期
    		                                                                                                                    // ，枚举
    		        var reg6 = /^[1-7][LC]$/; // 形如 3L 4C
    		        var reg7 = /^[1-7]?#[1-5]$/; // 形如 #4 6#3

    		        if (!(reg1.test(arr[5]) || reg2.test(arr[5]) || reg3.test(arr[5])
    		            || reg4.test(arr[5]) || reg5.test(arr[5]) || reg6.test(arr[5]) || reg7
    		            .test(arr[5]))) {
    		          toastr['warning']("Cron表达式第6位是周儿，允许的值（1-7 ,-*/? L C # SUN-SAT）如 （1,2,1-5,?,3C,4L,4#2,SUN等）", "警告");
    		          return false;
    		        }
    		        if (arr.length == 7) {
    		          // reg1=/^((19[7-9]\d)|(20\d\d))$/; // 1979-2099
    		          reg1 = /^((19[7-9]\d)|(20\d\d))([\/\-]((19[7-9]\d)|(20\d\d)))?$/;
    		          reg2 = /^((19[7-9]\d)|(20\d\d))(,((19[7-9]\d)|(20\d\d)))*$/;
    		          reg3 = /^(\*|(empty))$/i;
    		          if (!(reg1.test(arr[6]) || reg2.test(arr[6]) || reg3.test(arr[6]))) {
    		            toastr['warning']("Cron表达式第7位是年(可选字段)，允许的值（empty,1979-2099 ,-*/）如 (2013,empty,2012,2013 2012-2013等)", "警告");
    		            return false;
    		          }
    		        }
    		        return true;
    		      }
    		    } else {
    		      toastr['warning']("调度时间未设置", "警告")
    		      return false;
    		    }
    		  }
    	  
    	   //task config validation
    	  var handleValidationTaskSchedule = function() {
    	  // for more info visit the official plugin documentation:
    	  // http://docs.jquery.com/Plugins/Validation

    	  var taskConfigForm = $('#scheduleConfig');
    	  var error = $('.alert-danger', taskConfigForm);
    	  var success = $('.alert-success', taskConfigForm);

    	  taskConfigForm.validate({
    	      errorElement: 'span', //default input error message container
    	      errorClass: 'help-block help-block-error', // default input error message class
    	      focusInvalid: false, // do not focus the last invalid input
    	      ignore: "", // validate all fields including form hidden input
    	      rules: {
    	          hadoopQueue: {
    	              required: false
    	          }/*,
    	          datepicker: {
    	              required: true
    	          },
    	          occupation: {
    	              minlength: 5,
    	          },
    	          membership: {
    	              required: true
    	          },
    	          service: {
    	              required: true,
    	              minlength: 2
    	          },
    	          markdown: {
    	              required: true
    	          },
    	          editor1: {
    	              required: true
    	          },
    	          editor2: {
    	              required: true
    	          }*/
    	      },

    	      messages: { // custom messages for radio buttons and checkboxes
    	          membership: {
    	              required: "Please select a Membership type"
    	          },
    	          service: {
    	              required: "Please select  at least 2 types of Service",
    	              minlength: jQuery.validator.format("Please select  at least {0} types of Service")
    	          }
    	      },

    	      errorPlacement: function (error, element) { // render error placement for each input type
    	          if (element.parent(".input-group").size() > 0) {
    	              error.insertAfter(element.parent(".input-group"));
    	          } else if (element.attr("data-error-container")) {
    	              error.appendTo(element.attr("data-error-container"));
    	          } else if (element.parents('.radio-list').size() > 0) {
    	              error.appendTo(element.parents('.radio-list').attr("data-error-container"));
    	          } else if (element.parents('.radio-inline').size() > 0) {
    	              error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
    	          } else if (element.parents('.checkbox-list').size() > 0) {
    	              error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
    	          } else if (element.parents('.checkbox-inline').size() > 0) {
    	              error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
    	          } else {
    	              error.insertAfter(element); // for other inputs, just perform default behavior
    	          }
    	      },

    	      invalidHandler: function (event, validator) { //display error alert on form submit
    	          success.hide();
    	          error.show();
    	          Metronic.scrollTo(error, -200);
    	      },

    	      highlight: function (element) { // hightlight error inputs
    	         $(element)
    	              .closest('.form-group').addClass('has-error'); // set error class to the control group
    	      },

    	      unhighlight: function (element) { // revert the change done by hightlight
    	          $(element)
    	              .closest('.form-group').removeClass('has-error'); // set error class to the control group
    	      },

    	      success: function (label) {
    	          label
    	              .closest('.form-group').removeClass('has-error'); // set success class to the control group
    	      },

    	      submitHandler: function (form) {
    	          success.show();
    	          error.hide();
    	          form.submit(); // submit the form
    	      }

    	  });
    	  }

    return {
    	init: function(opts) {
    	      self.contextPath = opts.contextPath;
    	      self.userId = opts.userId;
    	      self.jobType = opts.jobType;
    	      initJobLevel();
    	      initStatus();
    	      initOtherSet();
    	      initHadoopQueueList();
    	      initCronExpression();
    	      initDependentTable();
    	      initHaveDependentTable();
    	      handleValidationTaskSchedule();
    	    },
    	    createCronExp : function() {
    	        createCronExp();
    	    },
	        quartzExpressDetail: function() {
	            quartzExpressDetail();
	        },
    	    validateScheduler: function() {
    	    	return validateScheduler();
	        },
	        loadScheduler : function(scheudlerInfo) {
	        	loadScheduler(scheudlerInfo);
	        },
	        moveDependencyJob: function(jobId,obj){
	        	moveDependencyJob(jobId,obj);
	        }
    };
})();
